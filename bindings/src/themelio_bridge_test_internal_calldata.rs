pub use themeliobridgetestinternalcalldata_mod::*;
#[allow(clippy::too_many_arguments)]
mod themeliobridgetestinternalcalldata_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "ThemelioBridgeTestInternalCalldata was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static THEMELIOBRIDGETESTINTERNALCALLDATA_ABI: ethers::contract::Lazy<
        ethers::core::abi::Abi,
    > = ethers::contract::Lazy::new(|| {
        serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testComputeMerkleRoot\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testDecodeInteger\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testExtractBlockHeight\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testExtractValueAndRecipient\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFailRelayHeader\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testRelayHeader\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testVerifyTx\",\"outputs\":[]}]") . expect ("invalid abi")
    });
    #[doc = r" Bytecode of the #name contract"]
    pub static THEMELIOBRIDGETESTINTERNALCALLDATA_BYTECODE: ethers::contract::Lazy<
        ethers::core::types::Bytes,
    > = ethers::contract::Lazy::new(|| {
        "" . parse () . expect ("invalid bytecode")
    });
    #[derive(Clone)]
    pub struct ThemelioBridgeTestInternalCalldata<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for ThemelioBridgeTestInternalCalldata<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for ThemelioBridgeTestInternalCalldata<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(ThemelioBridgeTestInternalCalldata))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> ThemelioBridgeTestInternalCalldata<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                THEMELIOBRIDGETESTINTERNALCALLDATA_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                THEMELIOBRIDGETESTINTERNALCALLDATA_ABI.clone(),
                THEMELIOBRIDGETESTINTERNALCALLDATA_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testComputeMerkleRoot` (0x07fc92f9) function"]
        pub fn test_compute_merkle_root(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([7, 252, 146, 249], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testDecodeInteger` (0x165a8ed4) function"]
        pub fn test_decode_integer(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([22, 90, 142, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testExtractBlockHeight` (0x80653d4f) function"]
        pub fn test_extract_block_height(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([128, 101, 61, 79], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testExtractValueAndRecipient` (0x4388a207) function"]
        pub fn test_extract_value_and_recipient(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([67, 136, 162, 7], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFailRelayHeader` (0x71ead0e3) function"]
        pub fn test_fail_relay_header(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 234, 208, 227], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testRelayHeader` (0x65a00680) function"]
        pub fn test_relay_header(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([101, 160, 6, 128], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testVerifyTx` (0x49bb8105) function"]
        pub fn test_verify_tx(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([73, 187, 129, 5], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(
            &self,
        ) -> ethers::contract::builders::Event<M, ThemelioBridgeTestInternalCalldataEvents>
        {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for ThemelioBridgeTestInternalCalldata<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum ThemelioBridgeTestInternalCalldataEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for ThemelioBridgeTestInternalCalldataEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogAddressFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogBytesFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogBytes32Filter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogIntFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(
                    ThemelioBridgeTestInternalCalldataEvents::LogNamedDecimalIntFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(
                    ThemelioBridgeTestInternalCalldataEvents::LogNamedDecimalUintFilter(decoded),
                );
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogNamedIntFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogStringFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogUintFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestInternalCalldataEvents::LogsFilter(
                    decoded,
                ));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for ThemelioBridgeTestInternalCalldataEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                ThemelioBridgeTestInternalCalldataEvents::LogFilter(element) => element.fmt(f),
                ThemelioBridgeTestInternalCalldataEvents::LogAddressFilter(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataEvents::LogBytesFilter(element) => element.fmt(f),
                ThemelioBridgeTestInternalCalldataEvents::LogBytes32Filter(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataEvents::LogIntFilter(element) => element.fmt(f),
                ThemelioBridgeTestInternalCalldataEvents::LogNamedAddressFilter(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataEvents::LogNamedBytesFilter(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataEvents::LogNamedBytes32Filter(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataEvents::LogNamedDecimalIntFilter(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataEvents::LogNamedDecimalUintFilter(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataEvents::LogNamedIntFilter(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataEvents::LogNamedStringFilter(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataEvents::LogNamedUintFilter(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataEvents::LogStringFilter(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataEvents::LogUintFilter(element) => element.fmt(f),
                ThemelioBridgeTestInternalCalldataEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `testComputeMerkleRoot`function with signature `testComputeMerkleRoot()` and selector `[7, 252, 146, 249]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testComputeMerkleRoot", abi = "testComputeMerkleRoot()")]
    pub struct TestComputeMerkleRootCall;
    #[doc = "Container type for all input parameters for the `testDecodeInteger`function with signature `testDecodeInteger()` and selector `[22, 90, 142, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testDecodeInteger", abi = "testDecodeInteger()")]
    pub struct TestDecodeIntegerCall;
    #[doc = "Container type for all input parameters for the `testExtractBlockHeight`function with signature `testExtractBlockHeight()` and selector `[128, 101, 61, 79]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testExtractBlockHeight", abi = "testExtractBlockHeight()")]
    pub struct TestExtractBlockHeightCall;
    #[doc = "Container type for all input parameters for the `testExtractValueAndRecipient`function with signature `testExtractValueAndRecipient()` and selector `[67, 136, 162, 7]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testExtractValueAndRecipient",
        abi = "testExtractValueAndRecipient()"
    )]
    pub struct TestExtractValueAndRecipientCall;
    #[doc = "Container type for all input parameters for the `testFailRelayHeader`function with signature `testFailRelayHeader()` and selector `[113, 234, 208, 227]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testFailRelayHeader", abi = "testFailRelayHeader()")]
    pub struct TestFailRelayHeaderCall;
    #[doc = "Container type for all input parameters for the `testRelayHeader`function with signature `testRelayHeader()` and selector `[101, 160, 6, 128]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testRelayHeader", abi = "testRelayHeader()")]
    pub struct TestRelayHeaderCall;
    #[doc = "Container type for all input parameters for the `testVerifyTx`function with signature `testVerifyTx()` and selector `[73, 187, 129, 5]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testVerifyTx", abi = "testVerifyTx()")]
    pub struct TestVerifyTxCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum ThemelioBridgeTestInternalCalldataCalls {
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestComputeMerkleRoot(TestComputeMerkleRootCall),
        TestDecodeInteger(TestDecodeIntegerCall),
        TestExtractBlockHeight(TestExtractBlockHeightCall),
        TestExtractValueAndRecipient(TestExtractValueAndRecipientCall),
        TestFailRelayHeader(TestFailRelayHeaderCall),
        TestRelayHeader(TestRelayHeaderCall),
        TestVerifyTx(TestVerifyTxCall),
    }
    impl ethers::core::abi::AbiDecode for ThemelioBridgeTestInternalCalldataCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestInternalCalldataCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestInternalCalldataCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestInternalCalldataCalls::SetUp(decoded));
            }
            if let Ok(decoded) =
                <TestComputeMerkleRootCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestInternalCalldataCalls::TestComputeMerkleRoot(decoded));
            }
            if let Ok(decoded) =
                <TestDecodeIntegerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestInternalCalldataCalls::TestDecodeInteger(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestExtractBlockHeightCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestInternalCalldataCalls::TestExtractBlockHeight(decoded));
            }
            if let Ok(decoded) =
                <TestExtractValueAndRecipientCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    ThemelioBridgeTestInternalCalldataCalls::TestExtractValueAndRecipient(decoded),
                );
            }
            if let Ok(decoded) =
                <TestFailRelayHeaderCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestInternalCalldataCalls::TestFailRelayHeader(decoded));
            }
            if let Ok(decoded) =
                <TestRelayHeaderCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestInternalCalldataCalls::TestRelayHeader(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestVerifyTxCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestInternalCalldataCalls::TestVerifyTx(
                    decoded,
                ));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for ThemelioBridgeTestInternalCalldataCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                ThemelioBridgeTestInternalCalldataCalls::IsTest(element) => element.encode(),
                ThemelioBridgeTestInternalCalldataCalls::Failed(element) => element.encode(),
                ThemelioBridgeTestInternalCalldataCalls::SetUp(element) => element.encode(),
                ThemelioBridgeTestInternalCalldataCalls::TestComputeMerkleRoot(element) => {
                    element.encode()
                }
                ThemelioBridgeTestInternalCalldataCalls::TestDecodeInteger(element) => {
                    element.encode()
                }
                ThemelioBridgeTestInternalCalldataCalls::TestExtractBlockHeight(element) => {
                    element.encode()
                }
                ThemelioBridgeTestInternalCalldataCalls::TestExtractValueAndRecipient(element) => {
                    element.encode()
                }
                ThemelioBridgeTestInternalCalldataCalls::TestFailRelayHeader(element) => {
                    element.encode()
                }
                ThemelioBridgeTestInternalCalldataCalls::TestRelayHeader(element) => {
                    element.encode()
                }
                ThemelioBridgeTestInternalCalldataCalls::TestVerifyTx(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for ThemelioBridgeTestInternalCalldataCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                ThemelioBridgeTestInternalCalldataCalls::IsTest(element) => element.fmt(f),
                ThemelioBridgeTestInternalCalldataCalls::Failed(element) => element.fmt(f),
                ThemelioBridgeTestInternalCalldataCalls::SetUp(element) => element.fmt(f),
                ThemelioBridgeTestInternalCalldataCalls::TestComputeMerkleRoot(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataCalls::TestDecodeInteger(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataCalls::TestExtractBlockHeight(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataCalls::TestExtractValueAndRecipient(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataCalls::TestFailRelayHeader(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestInternalCalldataCalls::TestRelayHeader(element) => element.fmt(f),
                ThemelioBridgeTestInternalCalldataCalls::TestVerifyTx(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for ThemelioBridgeTestInternalCalldataCalls {
        fn from(var: IsTestCall) -> Self {
            ThemelioBridgeTestInternalCalldataCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for ThemelioBridgeTestInternalCalldataCalls {
        fn from(var: FailedCall) -> Self {
            ThemelioBridgeTestInternalCalldataCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for ThemelioBridgeTestInternalCalldataCalls {
        fn from(var: SetUpCall) -> Self {
            ThemelioBridgeTestInternalCalldataCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestComputeMerkleRootCall> for ThemelioBridgeTestInternalCalldataCalls {
        fn from(var: TestComputeMerkleRootCall) -> Self {
            ThemelioBridgeTestInternalCalldataCalls::TestComputeMerkleRoot(var)
        }
    }
    impl ::std::convert::From<TestDecodeIntegerCall> for ThemelioBridgeTestInternalCalldataCalls {
        fn from(var: TestDecodeIntegerCall) -> Self {
            ThemelioBridgeTestInternalCalldataCalls::TestDecodeInteger(var)
        }
    }
    impl ::std::convert::From<TestExtractBlockHeightCall> for ThemelioBridgeTestInternalCalldataCalls {
        fn from(var: TestExtractBlockHeightCall) -> Self {
            ThemelioBridgeTestInternalCalldataCalls::TestExtractBlockHeight(var)
        }
    }
    impl ::std::convert::From<TestExtractValueAndRecipientCall>
        for ThemelioBridgeTestInternalCalldataCalls
    {
        fn from(var: TestExtractValueAndRecipientCall) -> Self {
            ThemelioBridgeTestInternalCalldataCalls::TestExtractValueAndRecipient(var)
        }
    }
    impl ::std::convert::From<TestFailRelayHeaderCall> for ThemelioBridgeTestInternalCalldataCalls {
        fn from(var: TestFailRelayHeaderCall) -> Self {
            ThemelioBridgeTestInternalCalldataCalls::TestFailRelayHeader(var)
        }
    }
    impl ::std::convert::From<TestRelayHeaderCall> for ThemelioBridgeTestInternalCalldataCalls {
        fn from(var: TestRelayHeaderCall) -> Self {
            ThemelioBridgeTestInternalCalldataCalls::TestRelayHeader(var)
        }
    }
    impl ::std::convert::From<TestVerifyTxCall> for ThemelioBridgeTestInternalCalldataCalls {
        fn from(var: TestVerifyTxCall) -> Self {
            ThemelioBridgeTestInternalCalldataCalls::TestVerifyTx(var)
        }
    }
}
