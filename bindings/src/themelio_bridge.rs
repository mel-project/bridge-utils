pub use themeliobridge_mod::*;
#[allow(clippy::too_many_arguments)]
mod themeliobridge_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "ThemelioBridge was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static THEMELIOBRIDGE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Approval\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"HeaderRelayed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32[]\",\"name\":\"stakers\",\"type\":\"bytes32[]\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"symsStaked\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"StakersRelayed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TokensBurned\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TokensMinted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Transfer\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tx_hash\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TxVerified\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burn\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header_\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes32[]\",\"name\":\"signers_\",\"type\":\"bytes32[]\",\"components\":[]},{\"internalType\":\"bytes32[]\",\"name\":\"signatures_\",\"type\":\"bytes32[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"relayHeader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32[]\",\"name\":\"stakers_\",\"type\":\"bytes32[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"stakerSyms_\",\"type\":\"uint256[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"relayStakers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transaction_\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"txIndex_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"blockHeight_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"verifyTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static THEMELIOBRIDGE_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60c06040526040516200001290620003d6565b604051809103906000f0801580156200002f573d6000803e3d6000fd5b50600780546001600160a01b0319166001600160a01b03929092169190911790553480156200005d57600080fd5b50604080518082018252600b81526a1ddc985c1c1959081b595b60aa1b6020808301918252835180850190945260048452631dd3515360e21b908401528151919291620000ad91600391620003e4565b508051620000c3906004906020840190620003e4565b5050506000600760009054906101000a90046001600160a01b03166001600160a01b0316630d056d9b6040518163ffffffff1660e01b81526004016000604051808303816000875af11580156200011e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001489190810190620006ed565b600754604051638215862760e01b81529192506001600160a01b0316906382158627906200017b90849060040162000991565b6000604051808303816000875af11580156200019b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001c59190810190620006ed565b600754604051638855ee9560e01b81529192506001600160a01b031690638855ee9590620001f8908490600401620009d0565b6000604051808303816000875af115801562000218573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002429190810190620009ec565b6200024d9062000a2c565b60a05260075460408051630d056d9b60e01b815290516000926001600160a01b031691630d056d9b9160048083019286929190829003018183875af11580156200029b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002c59190810190620006ed565b600754604051638215862760e01b81529192506001600160a01b031690638215862790620002f890849060040162000a54565b6000604051808303816000875af115801562000318573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003429190810190620006ed565b600754604051638855ee9560e01b81529192506001600160a01b031690638855ee959062000375908490600401620009d0565b6000604051808303816000875af115801562000395573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003bf9190810190620009ec565b620003ca9062000a2c565b6080525062000acf9050565b61229880620064ba83390190565b828054620003f29062000a98565b90600052602060002090601f01602090048101928262000416576000855562000461565b82601f106200043157805160ff191683800117855562000461565b8280016001018555821562000461579182015b828111156200046157825182559160200191906001019062000444565b506200046f92915062000473565b5090565b5b808211156200046f576000815560010162000474565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715620004c557620004c56200048a565b60405290565b60405160c081016001600160401b0381118282101715620004c557620004c56200048a565b805163ffffffff811681146200050557600080fd5b919050565b600082601f8301126200051c57600080fd5b6040516101008082016001600160401b03811183821017156200054357620005436200048a565b604052830181858211156200055757600080fd5b845b828110156200057c576200056d81620004f0565b82526020918201910162000559565b509195945050505050565b80516001600160401b03811681146200050557600080fd5b60005b83811015620005bc578181015183820152602001620005a2565b83811115620005cc576000848401525b50505050565b600082601f830112620005e457600080fd5b81516001600160401b03808211156200060157620006016200048a565b604051601f8301601f19908116603f011681019082821181831017156200062c576200062c6200048a565b816040528381528660208588010111156200064657600080fd5b620006598460208301602089016200059f565b9695505050505050565b805160ff811681146200050557600080fd5b600082601f8301126200068757600080fd5b6040516106c081016001600160401b0381118282101715620006ad57620006ad6200048a565b60405280613600840185811115620006c457600080fd5b845b818110156200057c57620006db87826200050a565b835260209092019161010001620006c6565b6000602082840312156200070057600080fd5b81516001600160401b03808211156200071857600080fd5b9083019061376082860312156200072e57600080fd5b62000738620004a0565b8251828111156200074857600080fd5b83016101a081880312156200075c57600080fd5b62000766620004cb565b6200077288836200050a565b815262000783610100830162000587565b602082015261012080830151858111156200079d57600080fd5b620007ab8a828601620005d2565b604084015250620007c06101408401620004f0565b6060830152620007d4610160840162000663565b6080830152620007e86101808401620004f0565b60a0830152818452620007ff89602088016200050a565b6020850152620008128982880162000675565b604085015250505062000829613720840162000663565b60608201526200083d6137408401620004f0565b608082015295945050505050565b8060005b6008811015620005cc57815163ffffffff168452602093840193909101906001016200084f565b8060005b6036811015620005cc57620008918483516200084b565b6101009390930192602091909101906001016200087a565b60006137608251818552620008c282860182516200084b565b60018060401b03602082015116613860860152604081015191506101a06138808601528151806139008701526139206200090382828901602087016200059f565b606083015163ffffffff9081166138a0890152608084015160ff166138c089015260a0840151166138e0880152602086810151945062000946908801856200084b565b604086015193506200095d61012088018562000876565b606086015160ff1661372088015260809095015163ffffffff16613740870152601f01601f19169094019092019392505050565b604081526000620009a66040830184620008a9565b82810360208401526008815267736d745f6e6f646560c01b60208201526040810191505092915050565b602081526000620009e56020830184620008a9565b9392505050565b600060208284031215620009ff57600080fd5b81516001600160401b0381111562000a1657600080fd5b62000a2484828501620005d2565b949350505050565b8051602080830151919081101562000a4e576000198160200360031b1b821691505b50919050565b60408152600062000a696040830184620008a9565b8281036020840152600d81526c736d745f64617461626c6f636b60981b60208201526040810191505092915050565b600181811c9082168062000aad57607f821691505b6020821081141562000a4e57634e487b7160e01b600052602260045260246000fd5b60805160a0516159c562000af5600039600061303c01526000610e0a01526159c56000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806342217b631161009757806395d89b411161006657806395d89b41146101f9578063a457c2d714610201578063a9059cbb14610214578063dd62ed3e1461022757600080fd5b806342217b631461019557806342966c68146101a8578063442a807a146101bd57806370a08231146101d057600080fd5b806318160ddd116100d357806318160ddd1461014e57806323b872dd14610160578063313ce56714610173578063395093511461018257600080fd5b806306fdde03146100fa578063073a47f314610118578063095ea7b31461013b575b600080fd5b61010261023a565b60405161010f9190614dfd565b60405180910390f35b61012b610126366004614e54565b6102cc565b604051901515815260200161010f565b61012b610149366004614ee9565b6103cc565b6002545b60405190815260200161010f565b61012b61016e366004614f13565b6103e4565b6040516009815260200161010f565b61012b610190366004614ee9565b61040a565b61012b6101a3366004614f90565b61042c565b6101bb6101b6366004615012565b610631565b005b61012b6101cb36600461502b565b610676565b6101526101de3660046150a5565b6001600160a01b031660009081526020819052604090205490565b610102610975565b61012b61020f366004614ee9565b610984565b61012b610222366004614ee9565b610a0a565b6101526102353660046150c0565b610a18565b606060038054610249906150f3565b80601f0160208091040260200160405190810160405280929190818152602001828054610275906150f3565b80156102c25780601f10610297576101008083540402835291602001916102c2565b820191906000526020600020905b8154815290600101906020018083116102a557829003601f168201915b5050505050905090565b60008084815b8181101561036c578585828181106102ec576102ec61512e565b90506020020135600660008b815260200190815260200160002060010160008a8a8581811061031d5761031d61512e565b905060200201358152602001908152602001600020819055508585828181106103485761034861512e565b905060200201358361035a919061515a565b925061036581615172565b90506102d2565b50600088815260066020526040908190208390555188907f39480b3d2bac27737f11346dee1d48b8e82f5f7079dd9ce6a66725eff0fc9143906103b6908a908a908a908a906151c3565b60405180910390a2506001979650505050505050565b6000336103da818585610a43565b5060019392505050565b6000336103f2858285610b68565b6103fd858585610be2565b60019150505b9392505050565b6000336103da81858561041d8383610a18565b610427919061515a565b610a43565b60008381526005602052604081208054829190610448906150f3565b80601f0160208091040260200160405190810160405280929190818152602001828054610474906150f3565b80156104c15780601f10610496576101008083540402835291602001916104c1565b820191906000526020600020905b8154815290600101906020018083116104a457829003601f168201915b5050505050905060008151116040518060400160405280601d81526020017f486561646572206d7573742062652072656c617965642066697273742e0000008152509061052a5760405162461bcd60e51b81526004016105219190614dfd565b60405180910390fd5b50600061053682610db0565b905060006105798a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e0192505050565b905081610588828a8989610fb4565b14156105e55760008061059b8c8c611098565b90925090506105aa81836112b1565b604051899084907ff0b34c36ce72539e8b1154718e3abefe1cedceb1fd30727d0dbc325bca1079a490600090a3600195505050505050610627565b600060405180606001604052806022815260200161596e602291399061061e5760405162461bcd60e51b81526004016105219190614dfd565b50600093505050505b9695505050505050565b3361063c8183611390565b60405182906001600160a01b038316907ffd38818f5291bf0bb3a2a48aadc06ba8757865d1dabd804585338aab3009dcb690600090a35050565b60006106838460026151f5565b6040805180820190915260208082527f496d70726f7065726c7920666f726d6174746564207369676e6174757265732e908201529083146106d75760405162461bcd60e51b81526004016105219190614dfd565b5060006106e488886114d6565b6000818152600560205260409020805491925090610701906150f3565b60408051808201909152601781527f48656164657220616c72656164792072656c617965642e00000000000000000060208201529150156107555760405162461bcd60e51b81526004016105219190614dfd565b50600060068161076862030d408561522a565b81526020810191909152604001600090812054915080805b888110156108b0576006600061079962030d408861522a565b815260200190815260200160002060010160008b8b848181106107be576107be61512e565b90506020020135815260200190815260200160002054915060008211801561088e575061088e8a8a838181106107f6576107f661512e565b90506020020135898984600261080c91906151f5565b81811061081b5761081b61512e565b905060200201358a8a85600261083191906151f5565b61083c90600161515a565b81811061084b5761084b61512e565b905060200201358f8f8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114e592505050565b156108a05761089d828461515a565b92505b6108a981615172565b9050610780565b5060036108be8460026151f5565b6108c8919061522a565b82116040518060400160405280601881526020017f496e73756666696369656e74207369676e6174757265732e00000000000000008152509061091e5760405162461bcd60e51b81526004016105219190614dfd565b506000848152600560205260409020610938908c8c614c55565b5060405184907f6eec8ede03d7cffe8c856c9375d84dc4b6eba3a8286c092df68fc582422e19b890600090a25060019a9950505050505050505050565b606060048054610249906150f3565b600033816109928286610a18565b9050838110156109f25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610521565b6109ff8286868403610a43565b506001949350505050565b6000336103da818585610be2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b038316610aa55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610521565b6001600160a01b038216610b065760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610521565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610b748484610a18565b90506000198114610bdc5781811015610bcf5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610521565b610bdc8484848403610a43565b50505050565b6001600160a01b038316610c465760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610521565b6001600160a01b038216610ca85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610521565b6001600160a01b03831660009081526020819052604090205481811015610d205760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610521565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610d5790849061515a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610da391815260200190565b60405180910390a3610bdc565b6000602181610dbf8483612d14565b9050610dcc81604061515a565b610dd6908361515a565b91506000610def8584610dea81602061515a565b612dd2565b610df89061523e565b95945050505050565b600754604080517f0000000000000000000000000000000000000000000000000000000000000000602082015260009283926001600160a01b039091169163c51d2cd791015b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610e729190614dfd565b6000604051808303816000875af1158015610e91573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eb99190810190615453565b600754604051638215862760e01b81529192506001600160a01b031690638215862790610eec90849087906004016156bc565b6000604051808303816000875af1158015610f0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f339190810190615453565b600754604051638855ee9560e01b81529192506001600160a01b031690638855ee9590610f649084906004016156e1565b6000604051808303816000875af1158015610f83573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fab91908101906156f4565b6104039061523e565b6000846060825b8481101561108a57610fce600288615728565b61101c5782868683818110610fe557610fe561512e565b90506020020135604051602001611006929190918252602082015260400190565b6040516020818303038152906040529150611062565b85858281811061102e5761102e61512e565b9050602002013583604051602001611050929190918252602082015260400190565b60405160208183030381529060405291505b61106d60028861522a565b965061107882613033565b925061108381615172565b9050610fbb565b50909150505b949350505050565b6000806001816110a986868461307d565b90506110ec86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250612d14915050565b6110f6908361515a565b915060005b8181101561116b5761114487878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250612d14915050565b61114f90602061515a565b611159908461515a565b925061116481615172565b90506110fb565b506111ad86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250612d14915050565b6111b890602061515a565b6111c2908361515a565b915060006111d187878561307d565b905061121487878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250612d14915050565b61121f90600261515a565b611229908461515a565b925061126c87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250612d14915050565b611276908461515a565b9250600087848861128882601461515a565b926112959392919061573c565b61129e91615766565b9195505060601c925050505b9250929050565b6001600160a01b0382166113075760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610521565b8060026000828254611319919061515a565b90915550506001600160a01b0382166000908152602081905260408120805483929061134690849061515a565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166113f05760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610521565b6001600160a01b038216600090815260208190526040902054818110156114645760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610521565b6001600160a01b038316600090815260208190526040812083830390556002805484929061149390849061579b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610b5b565b6000806110908484602161307d565b8051600090819081906040016001600160401b0381111561150857611508615262565b6040519080825280601f01601f191660200182016040528015611532576020820181803683370190505b50905060005b6020811015611588578681602081106115535761155361512e565b1a60f81b8282815181106115695761156961512e565b60200101906001600160f81b031916908160001a905350600101611538565b5060005b60208110156115df578781602081106115a7576115a761512e565b1a60f81b8282602001815181106115c0576115c061512e565b60200101906001600160f81b031916908160001a90535060010161158c565b5060005b845181101561163d578481815181106115fe576115fe61512e565b602001015160f81c60f81b82826040018151811061161e5761161e61512e565b60200101906001600160f81b031916908160001a9053506001016115e3565b50600061164982613297565b9050600060c082600360200201516001600160401b0316901b608083600260200201516001600160401b0316901b604084600160200201516001600160401b0316901b84600060200201516001600160401b031617171790506008817fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0016901c6008827eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b1790506010817fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c6010827dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b1790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff1916901c6020827bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b179050600060c0836007600881106117a2576117a261512e565b60200201516001600160401b0316901b608084600660200201516001600160401b0316901b604085600560200201516001600160401b0316901b85600460200201516001600160401b031617171790506008817fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0016901c6008827eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b1790506010817fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c6010827dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b1790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff1916901c6020827bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b1790506f14def9dea2f79cd65812631a5cf5d3ed600160fc1b01806118ff576118ff615214565b6f14def9dea2f79cd65812631a5cf5d3ed600160fc1b017f0ffffffffffffffffffffffffffffffec6ef5bf4737dcf70d6ec31748d98951d8309830867ffffffff0000000063ffffffff60a01b017dff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0060088d811b9182167cff000000ff000000ff000000ff000000ff000000ff000000ff000000ff9e90911c9d8e1617601090811b7fff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000009092167eff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000909e169d909d17909c1c9b909b17602081811b9c8d1663ffffffff63ffffffff60801b019290911c91821617604090811b600163ffffffff60601b01600160e01b0319909d1663ffffffff60401b63ffffffff60c01b0190921691909117901c9a909a17608081811b91901c17999450506001600160ff1b0389169250600091508190506013600160ff1b03838409905060006013600160ff1b036014600160ff1b038308905060006013600160ff1b037f52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a38409600101905060006013600160ff1b038284099050611ad481613b51565b5094506013600160ff1b0385860994506013600160ff1b0380826013600160ff1b0388890909840994506013600160ff1b03826013600160ff1b03878809099050828114611b6a57826013600160ff1b03038114611b3c576000975050505050505050611090565b6013600160ff1b037f2b8324804fc1df0b2b4d00993dfbd7a72f431806ad2fe478c4ee1b274a0ea0b0860994505b5050505060ff88901c6001821614611b86576013600160ff1b03035b67ffffffff0000000063ffffffff60a01b017dff000000ff000000ff000000ff000000ff000000ff000000ff000000ff00600888811b9182167cff000000ff000000ff000000ff000000ff000000ff000000ff000000ff9990911c98891617601090811b7fff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000009092167eff000000ff000000ff000000ff000000ff000000ff000000ff000000ff00009099169890981790971c96909617602081811b97881663ffffffff63ffffffff60801b019290911c91821617604090811b600163ffffffff60601b01600160e01b031990981663ffffffff60401b63ffffffff60c01b0190921691909117901c95909517608081811b91901c17946f14def9dea2f79cd65812631a5cf5d3ed600160fc1b018610611cc55760009350505050611090565b600080600080611cd3614cd9565b8587016013600160ff1b038789038101906000907f2406d9dc56dffce7198e80f2eef3d13000e0149a8283b156ebd69b9426b2f1596013600160ff1b038c8c09099050898960018060006013600160ff1b03828509905060006013600160ff1b03848709905060006013600160ff1b03848609905060006013600160ff1b03848509905060006013600160ff1b03848509905060006013600160ff1b03858709905060006013600160ff1b03858609905081820199508383036013600160ff1b030198508284019a506013600160ff1b0380611db157611db1615214565b89602519038283010897505050505050505060006013600160ff1b0380611dda57611dda615214565b828509905060006013600160ff1b03848709905060006013600160ff1b03848609905060006013600160ff1b03848509905060006013600160ff1b03848509905060006013600160ff1b03858709905060006013600160ff1b03858609905081820199508383036013600160ff1b030198508284019a506013600160ff1b0380611e6657611e66615214565b89602519038283010897505050505050505060006013600160ff1b0380611e8f57611e8f615214565b828509905060006013600160ff1b03848709905060006013600160ff1b03848609905060006013600160ff1b03848509905060006013600160ff1b03848509905060006013600160ff1b03858709905060006013600160ff1b03858609905081820199508383036013600160ff1b030198508284019a506013600160ff1b0380611f1b57611f1b615214565b8960251903828301089750600196508e955060009450505050505b6000808080806013600160ff1b03898c09905060006013600160ff1b038b8e09905060006013600160ff1b038b8d0990506013600160ff1b038e8e0960208a0151518484019850939092036013600160ff1b030195509093508001915084908660088110611fa657611fa661512e565b6020020152828660016020020151600160200201518660088110611fcc57611fcc61512e565b60200201526013600160ff1b037f2406d9dc56dffce7198e80f2eef3d13000e0149a8283b156ebd69b9426b2f159830960208701516040015186600881106120165761201661512e565b6020020152855151819086600881106120315761203161512e565b60200201528686600060200201516001602002015186600881106120575761205761512e565b60200201526013600160ff1b038188099650846007141561207b57505050506120fe565b60006013600160ff1b038f8609905060006013600160ff1b038f8609905060006013600160ff1b038f860990508183036013600160ff1b03019c506013600160ff1b03806120cb576120cb615214565b8185088383019e509b506013600160ff1b03816013600160ff1b030385089a505060019096019550611f36945050505050565b50600061210a83613b51565b90935090506013600160ff1b0383840992506013600160ff1b0383840992506013600160ff1b0383840992506013600160ff1b0383840992506013600160ff1b0383840992506013600160ff1b03818409925060075b8251602001516000906013600160ff1b039083600881106121835761218361512e565b602002015186096020850151519091506013600160ff1b0390829084600881106121af576121af61512e565b60200201510960208501515183600881106121cc576121cc61512e565b60200201526013600160ff1b038185600160200201516001602002015184600881106121fa576121fa61512e565b602002015109602080860151015183600881106122195761221961512e565b60200201526013600160ff1b038185600160200201516002602002015184600881106122475761224761512e565b60200201510960208501516040015183600881106122675761226761512e565b60200201528161227757506122a7565b8351516013600160ff1b039083600881106122945761229461512e565b6020020151860994505060001901612160565b5060405180606001604052806040518061010001604052807f43e7ce9d19ea5d329385a44c321ea16167c996e37dc6070c97de49e37ac61db981526020017f40cff34425d8ec30a3bb74ba58cd5854fa1e38186ad0d31ebc8ae251ceb2c97e81526020017f459bd27046e8dd45aea7008db87a5a8f7906779253d64523589518599fdfbf4b81526020017f69fdd1e28c23cc3894d0c8ff90e76f6d5b6e4c2e620136d04dd83c4a51581ab981526020017f54dceb3413ce5cfa11196dfc960b6edaf4b380c6d4d2378419cc0279ba49c5f381526020017f4e24184dd71a3d77eef3729f7f8cf7c17224cf40aa7b9548b9942f3c5084ceed81526020017f5a0e5aab20262674ae1175761cbf5e889b52a55fd7ac5027c228cebdc8d2360a81526020017f26239334073e9b38c62859556d451c3dcc8d30e84b361174f488eadde2cf17d981525081526020016040518061010001604052807f227e97c94c7c0933d2e0c21a3447c504fe9ccf82e8a05f59ce881c82eba0489f81526020017f226a3e0ecc4afec6fd0d288413014a9dbddecf06c1a2f0bb702ba77c613d820981526020017f34d7efc851d45c5e71efeb0f235b794691de6228877569b3a8d52bf058b8a4a081526020017f3c1f5fb3ca7166fce1471c9b752b6d28c56301ad7b65e8451b2c8c5526726e1281526020017f6102416cf02f02ff5be75275f55f28db89b2a9d2456b860ce22fc0e5031f7cc581526020017f40adf677f1bfdae057f0fd179c12617918ddaa2891a6530fb1a4294fa866549081526020017f61936f3c415609046187b8baa978cbc9b47893363ae5a3cc7d909f3635ae7f4881526020017f562a9662b6ec47f9e979d473c02b51e4423368238c58ddb52f0e5c6a180e641081525081526020016040518061010001604052807f3788bdb44f8632d42d0dbee5eea1acc6136cf411e655624f55e48902c3bd553481526020017f6190cf2c2a7b5ad769d594a82844f23b4167fa7c8ac30e51aa6cfbebdcd4b94581526020017f65f7787096be9204123a71f3ac88a87be1513217737d6a1e2f3a13a43d7e3a9a81526020017f023af32dbfa67975536479a7a7ce74a02142147fac0480187f1f13349cda1f2d81526020017f64fc44b7fc6841bddb0ced8b8b0fe6759137ef87ee96651215fc1dbcd25c64dc81526020017f1434aa3748b701d5b69df3d7d340c1fe3f6b9c1efc617484caadb47e382f447581526020017f457a6da8c962ef35f2b217423e5844e9d23534527e8ea4290d24e3ddf21720c681526020017f63b9540ceb60ccb51e4d989d956e053cf2511837efb79089d2ff40284202c53d815250815250826000600281106126815761268161512e565b602002018190525050505050505050505050600060038c60001c901b90506000897f80000000000000000000000000000000a6f7cef517bce6b2c09318d2e7ae9f6001905060008060019050600060019050600060019050600060fc90505b6008811b87811615612822576000808080806013600160ff1b03888c09905060006013600160ff1b038b8b09905081810195508181036013600160ff1b030194506013600160ff1b038061273657612736615214565b898c0993506013600160ff1b038a8d09925050506000868d901c6007169050866007901b198d169c5060008e905060006013600160ff1b038061277b5761277b615214565b82516020015184600881106127925761279261512e565b602002015187098251519091506000906013600160ff1b039085600881106127bc576127bc61512e565b602002015189098351604001519091506000906013600160ff1b039086600881106127e9576127e961512e565b6020020151870990508282036013600160ff1b03019e508087019d508282019c508087036013600160ff1b03019b505050505050505050505b8681161561295b576000808080806013600160ff1b03888c09905060006013600160ff1b038b8b09905081810195508181036013600160ff1b030194506013600160ff1b038061287457612874615214565b898c0993506013600160ff1b038a8d096007808a1b198f169e91945090891c1691508e905060006013600160ff1b0382600160200201516000602002015184600881106128c3576128c361512e565b6020020151870960208084015101519091506000906013600160ff1b039085600881106128f2576128f261512e565b602002015189096020840151604001519091506000906013600160ff1b039086600881106129225761292261512e565b6020020151870990508282036013600160ff1b03019e508087036013600160ff1b03019d508282019c508087019b505050505050505050505b81612a8a576000808080806013600160ff1b03888c09905060006013600160ff1b038b8b09905081810195508181036013600160ff1b030194506013600160ff1b03806129aa576129aa615214565b898c0993506013600160ff1b038a8d099250505060078b168d60006013600160ff1b0382600160200201516000602002015184600881106129ed576129ed61512e565b6020020151870960208084015101519091506000906013600160ff1b03908560088110612a1c57612a1c61512e565b602002015189096020840151604001519091506000906013600160ff1b03908660088110612a4c57612a4c61512e565b6020020151870990508282036013600160ff1b03019e508087036013600160ff1b03019d508282019c508087019b5050505050505050505050612b40565b60006013600160ff1b03848809905060006013600160ff1b03878709905060006013600160ff1b03868909905060006013600160ff1b03848509905060006013600160ff1b03848509905060006013600160ff1b03858709905060006013600160ff1b0385860990508182019c508383036013600160ff1b03019b508284019a506013600160ff1b0380612b2057612b20615214565b8c602519038283010899505060001990970196506126e095505050505050565b509299509097509550935060009150819050612b656013600160ff1b03858809613b51565b915091506013600160ff1b0380612b7e57612b7e615214565b82830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0381830991506013600160ff1b0380858409880996506013600160ff1b0380878409860967ffffffff0000000063ffffffff60a01b017dff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0060ff9990991b909117600881811b998a167cff000000ff000000ff000000ff000000ff000000ff000000ff000000ff9290911c91821617601090811b7fff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000909a167eff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000090921691909117901c97909717602081811b98891663ffffffff63ffffffff60801b019290911c91821617604090811b600163ffffffff60601b01600160e01b031990991663ffffffff60401b63ffffffff60c01b0190921691909117901c96909617608081811b91901c178d149950505050505050505050949350505050565b600080612d278484610dea81600161515a565b612d30906157b2565b9050600060fb60f81b6001600160f81b031983161015612d5257506001611090565b60fb60f81b6001600160f81b031983161415612d7057506003611090565b603f60fa1b6001600160f81b031983161415612d8e57506005611090565b60fd60f81b6001600160f81b031983161415612dac57506009611090565b607f60f91b6001600160f81b031983161415612dca57506011611090565b6110906157e9565b8251606090828411612f0d578084108015612deb575060015b8015612df75750808311155b6040518060400160405280601481526020017327baba1037b3103137bab732399039b634b1b29760611b81525090612e425760405162461bcd60e51b81526004016105219190614dfd565b506000612e4f858561579b565b90506000816001600160401b03811115612e6b57612e6b615262565b6040519080825280601f01601f191660200182016040528015612e95576020820181803683370190505b50905060005b82811015612f025787612eae828961515a565b81518110612ebe57612ebe61512e565b602001015160f81c60f81b828281518110612edb57612edb61512e565b60200101906001600160f81b031916908160001a905350612efb81615172565b9050612e9b565b509250610403915050565b8084108015612f1a575060015b8015612f2857506000198312155b6040518060400160405280601481526020017327baba1037b3103137bab732399039b634b1b29760611b81525090612f735760405162461bcd60e51b81526004016105219190614dfd565b506000612f80848661579b565b90506000816001600160401b03811115612f9c57612f9c615262565b6040519080825280601f01601f191660200182016040528015612fc6576020820181803683370190505b50905060005b82811015612f025787612fdf828961579b565b81518110612fef57612fef61512e565b602001015160f81c60f81b82828151811061300c5761300c61512e565b60200101906001600160f81b031916908160001a90535061302c81615172565b9050612fcc565b600754604080517f0000000000000000000000000000000000000000000000000000000000000000602082015260009283926001600160a01b039091169163c51d2cd79101610e47565b60008084838561308e82600161515a565b9261309b9392919061573c565b6130a4916157ff565b9050600060fb60f81b6001600160f81b0319831610156130c9575060f881901c610df8565b60fb60f81b6001600160f81b03198316141561313f5761312c86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061312692508891506002905061515a565b86612dd2565b6131359061582d565b60f01c9050610df8565b603f60fa1b6001600160f81b0319831614156131af5761319c86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061312692508891506004905061515a565b6131a590615860565b60e01c9050610df8565b60fd60f81b6001600160f81b03198316141561321f5761320c86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061312692508891506008905061515a565b61321590615893565b60c01c9050610df8565b607f60f91b6001600160f81b03198316141561328f5761327c86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061312692508891506010905061515a565b613285906158c6565b60801c9050610df8565b610df86157e9565b61329f614d06565b6040805161010081018252676a09e667f3bcc908815267bb67ae8584caa73b6020820152673c6ef372fe94f82b9181019190915267a54ff53a5f1d36f1606082015267510e527fade682d16080820152679b05688c2b3e6c1f60a0820152671f83d9abfb41bd6b60c0820152675be0cd19137e217960e0820152600080613324614d25565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915260408051610a008101825267428a2f98d728ae228152677137449123ef65cd602082015267b5c0fbcfec4d3b2f9181019190915267e9b5dba58189dbbc6060820152673956c25bf348b53860808201526759f111f1b605d01960a082015267923f82a4af194f9b60c082015267ab1c5ed5da6d811860e082015267d807aa98a30302426101008201526712835b0145706fbe61012082015267243185be4ee4b28c61014082015267550c7dc3d5ffb4e26101608201526772be5d74f27b896f6101808201526780deb1fe3b1696b16101a0820152679bdc06a725c712356101c082015267c19bf174cf6926946101e082015267e49b69c19ef14ad261020082015267efbe4786384f25e3610220820152670fc19dc68b8cd5b561024082015267240ca1cc77ac9c65610260820152672de92c6f592b0275610280820152674a7484aa6ea6e4836102a0820152675cb0a9dcbd41fbd46102c08201526776f988da831153b56102e082015267983e5152ee66dfab61030082015267a831c66d2db4321061032082015267b00327c898fb213f61034082015267bf597fc7beef0ee461036082015267c6e00bf33da88fc261038082015267d5a79147930aa7256103a08201526706ca6351e003826f6103c082015267142929670a0e6e706103e08201526727b70a8546d22ffc610400820152672e1b21385c26c926610420820152674d2c6dfc5ac42aed6104408201526753380d139d95b3df61046082015267650a73548baf63de61048082015267766a0abb3c77b2a86104a08201526781c2c92e47edaee66104c08201526792722c851482353b6104e082015267a2bfe8a14cf1036461050082015267a81a664bbc42300161052082015267c24b8b70d0f8979161054082015267c76c51a30654be3061056082015267d192e819d6ef521861058082015267d69906245565a9106105a082015267f40e35855771202a6105c082015267106aa07032bbd1b86105e08201526719a4c116b8d2d0c8610600820152671e376c085141ab53610620820152672748774cdf8eeb996106408201526734b0bcb5e19b48a861066082015267391c0cb3c5c95a63610680820152674ed8aa4ae3418acb6106a0820152675b9cca4f7763e3736106c082015267682e6ff3d6b2b8a36106e082015267748f82ee5defb2fc6107008201526778a5636f43172f606107208201526784c87814a1f0ab72610740820152678cc702081a6439ec6107608201526790befffa23631e2861078082015267a4506cebde82bde96107a082015267bef9a3f7b2c679156107c082015267c67178f2e372532b6107e082015267ca273eceea26619c61080082015267d186b8c721c0c20761082082015267eada7dd6cde0eb1e61084082015267f57d4f7fee6ed1786108608201526706f067aa72176fba610880820152670a637dc5a2c898a66108a082015267113f9804bef90dae6108c0820152671b710b35131c471b6108e08201526728db77f523047d846109008201526732caab7b40c72493610920820152673c9ebe0a15c9bebc61094082015267431d67c49c100d4c610960820152674cc5d4becb3e42b661098082015267597f299cfc657e2a6109a0820152675fcb6fab3ad6faec6109c0820152676c44198c4a4758176109e0820152600061382289614880565b905060005b608082518161383857613838615214565b04811015613b4357600061384c8383614a94565b89516001600160401b0390811687526020808c01518216908801526040808c01518216908801526060808c01518216908801526080808c015182169088015260a0808c015182169088015260c0808c015182169088015260e0808c015190911690870152905060005b6050811015613aa8576010811015613908578181601081106138d9576138d961512e565b60200201518782605081106138f0576138f061512e565b6001600160401b0390921660209290920201526139a9565b86601082036050811061391d5761391d61512e565b602002015161394488600f84036050811061393a5761393a61512e565b6020020151614b24565b8860078403605081106139595761395961512e565b60200201516139808a60028603605081106139765761397661512e565b6020020151614b53565b0101018782605081106139955761399561512e565b6001600160401b0390921660209290920201525b8681605081106139bb576139bb61512e565b60200201518582605081106139d2576139d261512e565b60200201516139fa88608001518960a001518a60c001516001600160401b0383181691161890565b613a078960800151614b7a565b8960e00151010101019850613a3386600001518760200151886040015180821690831691909216181890565b8651613a3e90614b9d565b60c0880180516001600160401b0390811660e08b015260a08a018051821690925260808a018051821690925260608a0180518e01821690925260408a018051821690925260208a01805182169092528951811690915291018a8101909116875297506001016138b5565b5050835188516001600160401b03910181168952602080860151908a01805190910182169052604080860151908a01805190910182169052606080860151908a01805190910182169052608080860151908a0180519091018216905260a080860151908a0180519091018216905260c080860151908a0180519091018216905260e080860151908a0180519091019091169052600101613827565b509598975050505050505050565b6000806013600160ff1b0383840990506013600160ff1b0381820991506013600160ff1b03836013600160ff1b038485090991506013600160ff1b0381830990506013600160ff1b03826013600160ff1b0383840909915060006013600160ff1b0383840990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381840992506013600160ff1b0383840990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b03818409905060006013600160ff1b0382830990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382850993506013600160ff1b0384850991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382850991506013600160ff1b0382830990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381820990506013600160ff1b0381830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382830991506013600160ff1b0382850993505050915091565b60606000608083516148929190615728565b61489d90608061579b565b90506070608084516148af9190615728565b106148d157608083516148c29190615728565b6148ce9061010061579b565b90505b60008184516148e0919061515a565b6001600160401b038111156148f7576148f7615262565b6040519080825280601f01601f191660200182016040528015614921576020820181803683370190505b50905060005b8451811015614988578481815181106149425761494261512e565b602001015160f81c60f81b82828151811061495f5761495f61512e565b60200101906001600160f81b031916908160001a9053508061498081615172565b915050614927565b50608060f81b818551815181106149a1576149a161512e565b60200101906001600160f81b031916908160001a9053506000845160086149c891906151f5565b60408051608083901b6001600160801b031916602082015281516010818303018152603090910190915290915060005b8151811015614a8957818160018451614a11919061579b565b614a1b919061579b565b81518110614a2b57614a2b61512e565b602001015160f81c60f81b848260018751614a46919061579b565b614a50919061579b565b81518110614a6057614a6061512e565b60200101906001600160f81b031916908160001a90535080614a8181615172565b9150506149f8565b509195945050505050565b614a9c614d44565b614aa4614d44565b60005b60108160ff161015614b1c57614adf85614ac28360086158f9565b60ff16614ad08760806151f5565b614ada919061515a565b614bc0565b60c01c828260ff1660108110614af757614af761512e565b6001600160401b03909216602092909202015280614b1481615922565b915050614aa7565b509392505050565b60006701ffffffffffffff600783901c16614b40836008614c1d565b614b4b846001614c1d565b181892915050565b60006703ffffffffffffff600683901c16614b6f83603d614c1d565b614b4b846013614c1d565b6000614b87826029614c1d565b614b92836012614c1d565b614b4b84600e614c1d565b6000614baa826027614c1d565b614bb5836022614c1d565b614b4b84601c614c1d565b60008060005b6008811015614b1c57614bda8160086151f5565b85614be5838761515a565b81518110614bf557614bf561512e565b01602001516001600160f81b031916901c919091179080614c1581615172565b915050614bc6565b60006001600160401b038316821c614c3683604061579b565b6001600160401b0316846001600160401b0316901b6104039190615942565b828054614c61906150f3565b90600052602060002090601f016020900481019282614c835760008555614cc9565b82601f10614c9c5782800160ff19823516178555614cc9565b82800160010185558215614cc9579182015b82811115614cc9578235825591602001919060010190614cae565b50614cd5929150614d63565b5090565b60405180604001604052806002905b614cf0614d78565b815260200190600190039081614ce85790505090565b6040518061010001604052806008906020820280368337509192915050565b60405180610a0001604052806050906020820280368337509192915050565b6040518061020001604052806010906020820280368337509192915050565b5b80821115614cd55760008155600101614d64565b60405180606001604052806003905b614d8f614d06565b815260200190600190039081614d875790505090565b60005b83811015614dc0578181015183820152602001614da8565b83811115610bdc5750506000910152565b60008151808452614de9816020860160208601614da5565b601f01601f19169290920160200192915050565b6020815260006104036020830184614dd1565b60008083601f840112614e2257600080fd5b5081356001600160401b03811115614e3957600080fd5b6020830191508360208260051b85010111156112aa57600080fd5b600080600080600060608688031215614e6c57600080fd5b8535945060208601356001600160401b0380821115614e8a57600080fd5b614e9689838a01614e10565b90965094506040880135915080821115614eaf57600080fd5b50614ebc88828901614e10565b969995985093965092949392505050565b80356001600160a01b0381168114614ee457600080fd5b919050565b60008060408385031215614efc57600080fd5b614f0583614ecd565b946020939093013593505050565b600080600060608486031215614f2857600080fd5b614f3184614ecd565b9250614f3f60208501614ecd565b9150604084013590509250925092565b60008083601f840112614f6157600080fd5b5081356001600160401b03811115614f7857600080fd5b6020830191508360208285010111156112aa57600080fd5b60008060008060008060808789031215614fa957600080fd5b86356001600160401b0380821115614fc057600080fd5b614fcc8a838b01614f4f565b909850965060208901359550604089013594506060890135915080821115614ff357600080fd5b5061500089828a01614e10565b979a9699509497509295939492505050565b60006020828403121561502457600080fd5b5035919050565b6000806000806000806060878903121561504457600080fd5b86356001600160401b038082111561505b57600080fd5b6150678a838b01614f4f565b9098509650602089013591508082111561508057600080fd5b61508c8a838b01614e10565b90965094506040890135915080821115614ff357600080fd5b6000602082840312156150b757600080fd5b61040382614ecd565b600080604083850312156150d357600080fd5b6150dc83614ecd565b91506150ea60208401614ecd565b90509250929050565b600181811c9082168061510757607f821691505b6020821081141561512857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561516d5761516d615144565b500190565b600060001982141561518657615186615144565b5060010190565b81835260006001600160fb1b038311156151a657600080fd5b8260051b8083602087013760009401602001938452509192915050565b6040815260006151d760408301868861518d565b82810360208401526151ea81858761518d565b979650505050505050565b600081600019048311821515161561520f5761520f615144565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261523957615239615214565b500490565b805160208083015191908110156151285760001960209190910360031b1b16919050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561529a5761529a615262565b60405290565b60405160c081016001600160401b038111828210171561529a5761529a615262565b805163ffffffff81168114614ee457600080fd5b600082601f8301126152e757600080fd5b6040516101008082018281106001600160401b038211171561530b5761530b615262565b6040528301818582111561531e57600080fd5b845b82811015614a8957615331816152c2565b825260209182019101615320565b80516001600160401b0381168114614ee457600080fd5b600082601f83011261536757600080fd5b81516001600160401b038082111561538157615381615262565b604051601f8301601f19908116603f011681019082821181831017156153a9576153a9615262565b816040528381528660208588010111156153c257600080fd5b610627846020830160208901614da5565b805160ff81168114614ee457600080fd5b600082601f8301126153f557600080fd5b6040516106c081018181106001600160401b038211171561541857615418615262565b6040528061360084018581111561542e57600080fd5b845b81811015614a895761544287826152d6565b835260209092019161010001615430565b60006020828403121561546557600080fd5b81516001600160401b038082111561547c57600080fd5b90830190613760828603121561549157600080fd5b615499615278565b8251828111156154a857600080fd5b83016101a081880312156154bb57600080fd5b6154c36152a0565b6154cd88836152d6565b81526154dc610100830161533f565b602082015261012080830151858111156154f557600080fd5b6155018a828601615356565b60408401525061551461014084016152c2565b606083015261552661016084016153d3565b608083015261553861018084016152c2565b60a083015281845261554d89602088016152d6565b602085015261555e898288016153e4565b604085015250505061557361372084016153d3565b606082015261558561374084016152c2565b608082015295945050505050565b8060005b6008811015610bdc57815163ffffffff16845260209384019390910190600101615597565b8060005b6036811015610bdc576155d4848351615593565b6101009390930192602091909101906001016155c0565b600061376082518185526156028286018251615593565b6001600160401b03602082015116613860860152604081015191506101a0613880860152615634613900860183614dd1565b915063ffffffff6060820151166138a086015260ff6080820151166138c086015260a0810151905061566f6138e086018263ffffffff169052565b5060208301516156826020860182615593565b5060408301516156966101208601826155bc565b50606083015160ff16613720850152608083015163ffffffff8116613740860152614b1c565b6040815260006156cf60408301856155eb565b8281036020840152610df88185614dd1565b60208152600061040360208301846155eb565b60006020828403121561570657600080fd5b81516001600160401b0381111561571c57600080fd5b61109084828501615356565b60008261573757615737615214565b500690565b6000808585111561574c57600080fd5b8386111561575957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156157935780818660140360031b1b83161692505b505092915050565b6000828210156157ad576157ad615144565b500390565b805160208201516001600160f81b031980821692919060018310156157e15780818460010360031b1b83161693505b505050919050565b634e487b7160e01b600052600160045260246000fd5b6001600160f81b031981358181169160018510156157935760019490940360031b84901b1690921692915050565b805160208201516001600160f01b031980821692919060028310156157e15760029290920360031b82901b161692915050565b805160208201516001600160e01b031980821692919060048310156157e15760049290920360031b82901b161692915050565b805160208201516001600160c01b031980821692919060088310156157e15760089290920360031b82901b161692915050565b805160208201516001600160801b031980821692919060108310156157e15760109290920360031b82901b161692915050565b600060ff821660ff84168160ff048111821515161561591a5761591a615144565b029392505050565b600060ff821660ff81141561593957615939615144565b60010192915050565b60006001600160401b0380831681851680830382111561596457615964615144565b0194935050505056fe5472616e73616374696f6e20756e61626c6520746f2062652076657269666965642ea2646970667358221220fa4cf5d47fe208f01fc0c919628129fea279d13a9713e9786b05aa6121bd1f6064736f6c634300080a003361028060405260026080908152600660a052600360c052600a60e0526007610100526000610120819052600461014052600d61016052600161018052600b6101a052600c6101c05260056101e052600961020052600e61022052600f6102405260086102605262000072916010620000f2565b506040805161010081018252636a09e667815263bb67ae856020820152633c6ef3729181019190915263a54ff53a606082015263510e527f6080820152639b05688c60a0820152631f83d9ab60c0820152635be0cd1960e0820152620000dd9060019060086200018c565b50348015620000eb57600080fd5b5062000232565b6001830191839082156200017a5791602002820160005b838211156200014957835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000109565b8015620001785782816101000a81549060ff021916905560010160208160000104928301926001030262000149565b505b50620001889291506200021b565b5090565b6001830191839082156200017a5791602002820160005b83821115620001e957835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302620001a3565b8015620001785782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620001e9565b5b808211156200018857600081556001016200021c565b61205680620002426000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630d056d9b1461005c57806312a63b5d1461007a578063821586271461008d5780638855ee95146100a0578063c51d2cd7146100c0575b600080fd5b6100646100d3565b60405161007191906117dd565b60405180910390f35b610064610088366004611900565b610144565b61006461009b366004611c6b565b610218565b6100b36100ae366004611cd3565b610334565b6040516100719190611d0f565b6100646100ce366004611900565b610363565b6100db611614565b6040805161010081019182905261013f91600190600890826000855b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116100f7579050505050505060006103cf565b905090565b61014c611614565b604080516101008101918290526000916101b391906001906008908286855b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161016b579050505050505060206103cf565b90506101c0818585610218565b506040805161010080825261012082019092526000916020820181803683370190505090506101ef8282610424565b6101f7611655565b61020182826104ab565b61020c8160406103cf565b93505050505b92915050565b610220611614565b60005b63ffffffff811683111561032b578451610400906102409061058c565b63ffffffff16141561029f57600061026361025e87600001516105b1565b610630565b86516020015190915060009061027a906001611d38565b905061028787838361066d565b61029a87602001518289608001516106af565b875250505b60006102ae866000015161058c565b6102ba90610400611d63565b905060006102d7826102d263ffffffff861688611d88565b610716565b90503660008763ffffffff8616886102ef8887611d9f565b63ffffffff169261030293929190611dbe565b915091506103158960000151838361073a565b506103208386611d9f565b945050505050610223565b50929392505050565b604080516020808252818301909252606091600091906020820181803683370190505090506102128382610424565b61036b611614565b610373611655565b600084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293506103bb92508391508490506104ab565b6103c68260106103cf565b95945050505050565b6103d7611614565b6103df611674565b6040518060a001604052806103f6866000876106af565b8152602001858152602001828152602001600060ff1681526020018463ffffffff1681525091505092915050565b600061043383600001516105b1565b606084015190915060ff165b63ffffffff81161561049b57610456600182611d63565b905061049484604001518263ffffffff166036811061047757610477611de8565b602002015161048584610630565b866020015187608001516108e0565b915061043f565b6104a582846109e7565b50505050565b60208251111561051e5760405162461bcd60e51b815260206004820152603360248201527f4461746120627974657320697320746f6f206c6f6e6720746f20636f6e7665726044820152727420746f203820342d6279746520776f72647360681b60648201526084015b60405180910390fd5b60005b6004835161052f9190611e14565b8160ff1610156105875761055083610548836004611e28565b60ff16610a61565b828260ff166008811061056557610565611de8565b63ffffffff90921660209290920201528061057f81611e51565b915050610521565b505050565b60008160600151826080015160406105a49190611e28565b60ff166102129190611d9f565b6105b96116a2565b6105c16116dd565b6105cf836040015182610b3a565b6040518060a001604052808460000151815260200182815260200184602001516001600160401b03168152602001846060015163ffffffff168152602001600261061886610c21565b8660a00151171763ffffffff16815250915050919050565b610638611655565b600061065b83600001518460200151856040015186606001518760800151610c48565b905061066681610ee7565b9392505050565b600181166106a55761069161068184610f5e565b8385602001518660800151610faa565b915060011c677fffffffffffffff1661066d565b6105878383610fc1565b6106b76116fc565b6040805181815260608101825260009160208201818036833750506040805160c0810182529788526001600160401b03969096166020880152509385019390935250600060608401819052608084015263ffffffff1660a08301525090565b60008163ffffffff168363ffffffff161015610733575081610212565b5080610212565b6000805b63ffffffff81168311156108d857606085015163ffffffff16604014156107e6576107676116dd565b610775866040015182610b3a565b855160208701516107a19161079c91849060406107918c610c21565b8c60a0015117610c48565b610ee7565b8652608086018051600191906107b8908390611e71565b60ff169052506040805181815260608101825290602082018180368337505050604087015250600060608601525b60608501516000906107f9906040611d63565b90506000610811826102d263ffffffff861688611d88565b905060005b8163ffffffff168163ffffffff1610156108a95786866108368387611d9f565b63ffffffff1681811061084b5761084b611de8565b9050013560f81c60f81b886040015189606001518361086a9190611d9f565b63ffffffff168151811061088057610880611de8565b60200101906001600160f81b031916908160001a905350806108a181611e96565b915050610816565b5080876060018181516108bc9190611d9f565b63ffffffff169052506108cf8184611d9f565b9250505061073e565b509392505050565b6108e86116a2565b6108f06116dd565b60005b60088160ff16101561095057868160ff166008811061091457610914611de8565b6020020151828260ff166010811061092e5761092e611de8565b63ffffffff90921660209290920201528061094881611e51565b9150506108f3565b5060085b60108160ff1610156109b157858160ff166008811061097557610975611de8565b6020020151828260ff166010811061098f5761098f611de8565b63ffffffff9092166020929092020152806109a981611e51565b915050610954565b506040805160a081018252948552602085019190915260008482015260608401525060041763ffffffff16608082015292915050565b6000610a0a83600001518460200151600086606001516008886080015117610c48565b905060005b60088163ffffffff1610156104a557610a4f828263ffffffff1660108110610a3957610a39611de8565b602002015184610a4a846004611eba565b611003565b80610a5981611e96565b915050610a0f565b6000610a6e826004611ee6565b83511015610abe5760405162461bcd60e51b815260206004820152601f60248201527f6c655f62797465735f6765745f75696e7433325f6f75744f66426f756e6473006044820152606401610515565b6000805b60048160ff1610156108d857610ad9816008611e28565b60ff168585610ae9846003611efe565b60ff16610af69190611ee6565b81518110610b0657610b06611de8565b0160200151610b26916001600160f81b0319909116901c60e01c83611d9f565b915080610b3281611e51565b915050610ac2565b6040825111158015610b57575060048251610b559190611f21565b155b610bc05760405162461bcd60e51b815260206004820152603460248201527f4461746120627974657320697320746f6f206c6f6e6720746f20636f6e7665726044820152737420746f20313620342d6279746520776f72647360601b6064820152608401610515565b60005b60048351610bd19190611e14565b8160ff16101561058757610bea83610548836004611e28565b828260ff1660108110610bff57610bff611de8565b63ffffffff909216602092909202015280610c1981611e51565b915050610bc3565b6000816080015160ff1660001415610c3b57506001919050565b506000919050565b919050565b610c506116dd565b610c586116dd565b60005b60108160ff161015610cb857868160ff1660108110610c7c57610c7c611de8565b6020020151828260ff1660108110610c9657610c96611de8565b63ffffffff909216602092909202015280610cb081611e51565b915050610c5b565b50600060405180610200016040528089600060088110610cda57610cda611de8565b6020908102919091015163ffffffff90811683528b8201518116838301526040808d01518216908401526060808d01518216908401526080808d015182169084015260a0808d015182169084015260c0808d015182169084015260e0808d0151821690840152600154808216610100850152640100000000810482166101208501526801000000000000000081048216610140850152600160601b900481166101608401528981166101808401529089901c81166101a08301528781166101c083015286166101e0909101529050610db28183611088565b610dbb82611170565b610dc58183611088565b610dce82611170565b610dd88183611088565b610de182611170565b610deb8183611088565b610df482611170565b610dfe8183611088565b610e0782611170565b610e118183611088565b610e1a82611170565b610e248183611088565b60005b60088160ff161015610edb5781610e3f826008611e71565b60ff1660108110610e5257610e52611de8565b6020020151828260ff1660108110610e6c57610e6c611de8565b6020020180519190911863ffffffff1690528860ff821660088110610e9357610e93611de8565b602002015182610ea4836008611e71565b60ff1660108110610eb757610eb7611de8565b6020020180519190911863ffffffff16905280610ed381611e51565b915050610e27565b50979650505050505050565b610eef611655565b610ef7611655565b60005b60088160ff161015610f5757838160ff1660108110610f1b57610f1b611de8565b6020020151828260ff1660088110610f3557610f35611de8565b63ffffffff909216602092909202015280610f4f81611e51565b915050610efa565b5092915050565b610f66611655565b600182606001818151610f799190611efe565b60ff908116909152604084015160608501519092501660368110610f9f57610f9f611de8565b602002015192915050565b610fb2611655565b6103c661025e868686866108e0565b808260400151836060015160ff1660368110610fdf57610fdf611de8565b602002015260608201805160019190610ff9908390611e71565b60ff169052505050565b60005b60048160ff1610156104a55761101d816008611e28565b611028906002612011565b6110389063ffffffff8616611e14565b60f81b8361104960ff841685611d9f565b63ffffffff168151811061105f5761105f611de8565b60200101906001600160f81b031916908160001a9053508061108081611e51565b915050611006565b6110a982600060046008600c868460200201518760015b6020020151611261565b6110c582600160056009600d866002602002015187600361109f565b6110e18260026006600a600e866004602002015187600561109f565b6110fd8260036007600b600f866006602002015187600761109f565b6111198260006005600a600f866008602002015187600961109f565b6111358260016006600b600c86600a602002015187600b61109f565b61115182600260076008600d86600c602002015187600d61109f565b61116c82600360046009600e8681602002015187600f61109f565b5050565b6111786116dd565b60005b60108160ff161015611200578260008260ff166010811061119e5761119e611de8565b602081049091015460ff601f9092166101000a900416601081106111c4576111c4611de8565b6020020151828260ff16601081106111de576111de611de8565b63ffffffff9092166020929092020152806111f881611e51565b91505061117b565b5060005b60108160ff16101561058757818160ff166010811061122557611225611de8565b6020020151838260ff166010811061123f5761123f611de8565b63ffffffff90921660209290920201528061125981611e51565b915050611204565b81878663ffffffff166010811061127a5761127a611de8565b6020020151888863ffffffff166010811061129757611297611de8565b60200201510101878763ffffffff16601081106112b6576112b6611de8565b602002019063ffffffff16908163ffffffff1681525050611312878763ffffffff16601081106112e8576112e8611de8565b6020020151888563ffffffff166010811061130557611305611de8565b60200201511860106115df565b878463ffffffff166010811061132a5761132a611de8565b602002019063ffffffff16908163ffffffff1681525050868363ffffffff166010811061135957611359611de8565b6020020151878563ffffffff166010811061137657611376611de8565b602002015101878563ffffffff166010811061139457611394611de8565b602002019063ffffffff16908163ffffffff16815250506113f0878563ffffffff16601081106113c6576113c6611de8565b6020020151888763ffffffff16601081106113e3576113e3611de8565b602002015118600c6115df565b878663ffffffff166010811061140857611408611de8565b602002019063ffffffff16908163ffffffff168152505080878663ffffffff166010811061143857611438611de8565b6020020151888863ffffffff166010811061145557611455611de8565b60200201510101878763ffffffff166010811061147457611474611de8565b602002019063ffffffff16908163ffffffff16815250506114d0878763ffffffff16601081106114a6576114a6611de8565b6020020151888563ffffffff16601081106114c3576114c3611de8565b60200201511860086115df565b878463ffffffff16601081106114e8576114e8611de8565b602002019063ffffffff16908163ffffffff1681525050868363ffffffff166010811061151757611517611de8565b6020020151878563ffffffff166010811061153457611534611de8565b602002015101878563ffffffff166010811061155257611552611de8565b602002019063ffffffff16908163ffffffff16815250506115ae878563ffffffff166010811061158457611584611de8565b6020020151888763ffffffff16601081106115a1576115a1611de8565b60200201511860076115df565b878663ffffffff16601081106115c6576115c6611de8565b63ffffffff909216602092909202015250505050505050565b600060e083901b6115f1836020611efe565b6001600160e01b031990911660ff84811682901c92161b1760e01c905092915050565b6040518060a001604052806116276116fc565b8152602001611634611655565b8152602001611641611674565b815260006020820181905260409091015290565b6040518061010001604052806008906020820280368337509192915050565b604051806106c001604052806036905b61168c611655565b8152602001906001900390816116845790505090565b6040518060a001604052806116b5611655565b81526020016116c26116dd565b81526000602082018190526040820181905260609091015290565b6040518061020001604052806010906020820280368337509192915050565b6040518060c0016040528061170f611655565b815260006020820181905260606040830181905282018190526080820181905260a09091015290565b8060005b60088110156104a557815163ffffffff1684526020938401939091019060010161173c565b6000815180845260005b818110156117875760208185018101518683018201520161176b565b81811115611799576000602083870101525b50601f01601f19169290920160200192915050565b8060005b60368110156104a5576117c6848351611738565b6101009390930192602091909101906001016117b2565b60208152600082516137608060208501526117fd61378085018351611738565b6001600160401b0360208301511661388085015260408201516101a06138a086015261182d613920860182611761565b905063ffffffff6060840151166138c086015260ff6080840151166138e086015260a0830151925061186861390086018463ffffffff169052565b6020860151925061187c6040860184611738565b604086015192506118916101408601846117ae565b606086015160ff1661374086015260809095015163ffffffff169301929092525090919050565b60008083601f8401126118ca57600080fd5b5081356001600160401b038111156118e157600080fd5b6020830191508360208285010111156118f957600080fd5b9250929050565b6000806020838503121561191357600080fd5b82356001600160401b0381111561192957600080fd5b611935858286016118b8565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561197957611979611941565b60405290565b60405160c081016001600160401b038111828210171561197957611979611941565b803563ffffffff81168114610c4357600080fd5b600082601f8301126119c657600080fd5b6040516101008082018281106001600160401b03821117156119ea576119ea611941565b604052830181858211156119fd57600080fd5b845b82811015611a1e57611a10816119a1565b8252602091820191016119ff565b509195945050505050565b80356001600160401b0381168114610c4357600080fd5b600082601f830112611a5157600080fd5b81356001600160401b0380821115611a6b57611a6b611941565b604051601f8301601f19908116603f01168101908282118183101715611a9357611a93611941565b81604052838152866020858801011115611aac57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114610c4357600080fd5b600082601f830112611aee57600080fd5b6040516106c081018181106001600160401b0382111715611b1157611b11611941565b60405280613600840185811115611b2757600080fd5b845b81811015611a1e57611b3b87826119b5565b835260209092019161010001611b29565b60006137608284031215611b5f57600080fd5b611b67611957565b905081356001600160401b0380821115611b8057600080fd5b908301906101a08286031215611b9557600080fd5b611b9d61197f565b611ba786846119b5565b8152611bb66101008401611a29565b60208201526101208084013583811115611bcf57600080fd5b611bdb88828701611a40565b604084015250611bee61014085016119a1565b6060830152611c006101608501611acc565b6080830152611c1261018085016119a1565b60a0830152818552611c2787602088016119b5565b6020860152611c3887828801611add565b604086015250505050611c4e6137208301611acc565b6060820152611c6061374083016119a1565b608082015292915050565b600080600060408486031215611c8057600080fd5b83356001600160401b0380821115611c9757600080fd5b611ca387838801611b4c565b94506020860135915080821115611cb957600080fd5b50611cc6868287016118b8565b9497909650939450505050565b600060208284031215611ce557600080fd5b81356001600160401b03811115611cfb57600080fd5b611d0784828501611b4c565b949350505050565b6020815260006106666020830184611761565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03808316818516808303821115611d5a57611d5a611d22565b01949350505050565b600063ffffffff83811690831681811015611d8057611d80611d22565b039392505050565b600082821015611d9a57611d9a611d22565b500390565b600063ffffffff808316818516808303821115611d5a57611d5a611d22565b60008085851115611dce57600080fd5b83861115611ddb57600080fd5b5050820193919092039150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082611e2357611e23611dfe565b500490565b600060ff821660ff84168160ff0481118215151615611e4957611e49611d22565b029392505050565b600060ff821660ff811415611e6857611e68611d22565b60010192915050565b600060ff821660ff84168060ff03821115611e8e57611e8e611d22565b019392505050565b600063ffffffff80831681811415611eb057611eb0611d22565b6001019392505050565b600063ffffffff80831681851681830481118215151615611edd57611edd611d22565b02949350505050565b60008219821115611ef957611ef9611d22565b500190565b600060ff821660ff841680821015611f1857611f18611d22565b90039392505050565b600082611f3057611f30611dfe565b500690565b600181815b80851115611f70578160001904821115611f5657611f56611d22565b80851615611f6357918102915b93841c9390800290611f3a565b509250929050565b600082611f8757506001610212565b81611f9457506000610212565b8160018114611faa5760028114611fb457611fd0565b6001915050610212565b60ff841115611fc557611fc5611d22565b50506001821b610212565b5060208310610133831016604e8410600b8410161715611ff3575081810a610212565b611ffd8383611f35565b8060001904821115611e4957611e49611d22565b600061066660ff841683611f7856fea2646970667358221220dae334e0ddae969d06377574c6f5eeed32b46be2b5da812d333d669f5f84511b64736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct ThemelioBridge<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for ThemelioBridge<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for ThemelioBridge<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(ThemelioBridge))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> ThemelioBridge<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), THEMELIOBRIDGE_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                THEMELIOBRIDGE_ABI.clone(),
                THEMELIOBRIDGE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `allowance` (0xdd62ed3e) function"]
        pub fn allowance(
            &self,
            owner: ethers::core::types::Address,
            spender: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([221, 98, 237, 62], (owner, spender))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `approve` (0x095ea7b3) function"]
        pub fn approve(
            &self,
            spender: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([9, 94, 167, 179], (spender, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `balanceOf` (0x70a08231) function"]
        pub fn balance_of(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([112, 160, 130, 49], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `burn` (0x42966c68) function"]
        pub fn burn(
            &self,
            value: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([66, 150, 108, 104], value)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `decimals` (0x313ce567) function"]
        pub fn decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([49, 60, 229, 103], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `decreaseAllowance` (0xa457c2d7) function"]
        pub fn decrease_allowance(
            &self,
            spender: ethers::core::types::Address,
            subtracted_value: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([164, 87, 194, 215], (spender, subtracted_value))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `increaseAllowance` (0x39509351) function"]
        pub fn increase_allowance(
            &self,
            spender: ethers::core::types::Address,
            added_value: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([57, 80, 147, 81], (spender, added_value))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `name` (0x06fdde03) function"]
        pub fn name(&self) -> ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([6, 253, 222, 3], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `relayHeader` (0x442a807a) function"]
        pub fn relay_header(
            &self,
            header: ethers::core::types::Bytes,
            signers: ::std::vec::Vec<[u8; 32]>,
            signatures: ::std::vec::Vec<[u8; 32]>,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([68, 42, 128, 122], (header, signers, signatures))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `relayStakers` (0x073a47f3) function"]
        pub fn relay_stakers(
            &self,
            epoch: ethers::core::types::U256,
            stakers: ::std::vec::Vec<[u8; 32]>,
            staker_syms: ::std::vec::Vec<ethers::core::types::U256>,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([7, 58, 71, 243], (epoch, stakers, staker_syms))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `symbol` (0x95d89b41) function"]
        pub fn symbol(&self) -> ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([149, 216, 155, 65], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `totalSupply` (0x18160ddd) function"]
        pub fn total_supply(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([24, 22, 13, 221], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transfer` (0xa9059cbb) function"]
        pub fn transfer(
            &self,
            to: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([169, 5, 156, 187], (to, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferFrom` (0x23b872dd) function"]
        pub fn transfer_from(
            &self,
            from: ethers::core::types::Address,
            to: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([35, 184, 114, 221], (from, to, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `verifyTx` (0x42217b63) function"]
        pub fn verify_tx(
            &self,
            transaction: ethers::core::types::Bytes,
            tx_index: ethers::core::types::U256,
            block_height: ethers::core::types::U256,
            proof: ::std::vec::Vec<[u8; 32]>,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash(
                    [66, 33, 123, 99],
                    (transaction, tx_index, block_height, proof),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `Approval` event"]
        pub fn approval_filter(&self) -> ethers::contract::builders::Event<M, ApprovalFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `HeaderRelayed` event"]
        pub fn header_relayed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, HeaderRelayedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `StakersRelayed` event"]
        pub fn stakers_relayed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, StakersRelayedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokensBurned` event"]
        pub fn tokens_burned_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokensBurnedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokensMinted` event"]
        pub fn tokens_minted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokensMintedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Transfer` event"]
        pub fn transfer_filter(&self) -> ethers::contract::builders::Event<M, TransferFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TxVerified` event"]
        pub fn tx_verified_filter(&self) -> ethers::contract::builders::Event<M, TxVerifiedFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, ThemelioBridgeEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for ThemelioBridge<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Approval", abi = "Approval(address,address,uint256)")]
    pub struct ApprovalFilter {
        #[ethevent(indexed)]
        pub owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub spender: ethers::core::types::Address,
        pub value: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "HeaderRelayed", abi = "HeaderRelayed(uint256)")]
    pub struct HeaderRelayedFilter {
        #[ethevent(indexed)]
        pub height: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "StakersRelayed",
        abi = "StakersRelayed(uint256,bytes32[],uint256[])"
    )]
    pub struct StakersRelayedFilter {
        #[ethevent(indexed)]
        pub epoch: ethers::core::types::U256,
        pub stakers: Vec<[u8; 32]>,
        pub syms_staked: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokensBurned", abi = "TokensBurned(address,uint256)")]
    pub struct TokensBurnedFilter {
        #[ethevent(indexed)]
        pub recipient: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub value: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokensMinted", abi = "TokensMinted(address,uint256)")]
    pub struct TokensMintedFilter {
        #[ethevent(indexed)]
        pub recipient: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub value: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Transfer", abi = "Transfer(address,address,uint256)")]
    pub struct TransferFilter {
        #[ethevent(indexed)]
        pub from: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ethers::core::types::Address,
        pub value: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TxVerified", abi = "TxVerified(bytes32,uint256)")]
    pub struct TxVerifiedFilter {
        #[ethevent(indexed)]
        pub tx_hash: [u8; 32],
        #[ethevent(indexed)]
        pub height: ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum ThemelioBridgeEvents {
        ApprovalFilter(ApprovalFilter),
        HeaderRelayedFilter(HeaderRelayedFilter),
        StakersRelayedFilter(StakersRelayedFilter),
        TokensBurnedFilter(TokensBurnedFilter),
        TokensMintedFilter(TokensMintedFilter),
        TransferFilter(TransferFilter),
        TxVerifiedFilter(TxVerifiedFilter),
    }
    impl ethers::contract::EthLogDecode for ThemelioBridgeEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = ApprovalFilter::decode_log(log) {
                return Ok(ThemelioBridgeEvents::ApprovalFilter(decoded));
            }
            if let Ok(decoded) = HeaderRelayedFilter::decode_log(log) {
                return Ok(ThemelioBridgeEvents::HeaderRelayedFilter(decoded));
            }
            if let Ok(decoded) = StakersRelayedFilter::decode_log(log) {
                return Ok(ThemelioBridgeEvents::StakersRelayedFilter(decoded));
            }
            if let Ok(decoded) = TokensBurnedFilter::decode_log(log) {
                return Ok(ThemelioBridgeEvents::TokensBurnedFilter(decoded));
            }
            if let Ok(decoded) = TokensMintedFilter::decode_log(log) {
                return Ok(ThemelioBridgeEvents::TokensMintedFilter(decoded));
            }
            if let Ok(decoded) = TransferFilter::decode_log(log) {
                return Ok(ThemelioBridgeEvents::TransferFilter(decoded));
            }
            if let Ok(decoded) = TxVerifiedFilter::decode_log(log) {
                return Ok(ThemelioBridgeEvents::TxVerifiedFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for ThemelioBridgeEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                ThemelioBridgeEvents::ApprovalFilter(element) => element.fmt(f),
                ThemelioBridgeEvents::HeaderRelayedFilter(element) => element.fmt(f),
                ThemelioBridgeEvents::StakersRelayedFilter(element) => element.fmt(f),
                ThemelioBridgeEvents::TokensBurnedFilter(element) => element.fmt(f),
                ThemelioBridgeEvents::TokensMintedFilter(element) => element.fmt(f),
                ThemelioBridgeEvents::TransferFilter(element) => element.fmt(f),
                ThemelioBridgeEvents::TxVerifiedFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `allowance`function with signature `allowance(address,address)` and selector `[221, 98, 237, 62]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "allowance", abi = "allowance(address,address)")]
    pub struct AllowanceCall {
        pub owner: ethers::core::types::Address,
        pub spender: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `approve`function with signature `approve(address,uint256)` and selector `[9, 94, 167, 179]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "approve", abi = "approve(address,uint256)")]
    pub struct ApproveCall {
        pub spender: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `balanceOf`function with signature `balanceOf(address)` and selector `[112, 160, 130, 49]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "balanceOf", abi = "balanceOf(address)")]
    pub struct BalanceOfCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `burn`function with signature `burn(uint256)` and selector `[66, 150, 108, 104]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "burn", abi = "burn(uint256)")]
    pub struct BurnCall {
        pub value: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `decimals`function with signature `decimals()` and selector `[49, 60, 229, 103]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "decimals", abi = "decimals()")]
    pub struct DecimalsCall;
    #[doc = "Container type for all input parameters for the `decreaseAllowance`function with signature `decreaseAllowance(address,uint256)` and selector `[164, 87, 194, 215]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "decreaseAllowance", abi = "decreaseAllowance(address,uint256)")]
    pub struct DecreaseAllowanceCall {
        pub spender: ethers::core::types::Address,
        pub subtracted_value: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `increaseAllowance`function with signature `increaseAllowance(address,uint256)` and selector `[57, 80, 147, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "increaseAllowance", abi = "increaseAllowance(address,uint256)")]
    pub struct IncreaseAllowanceCall {
        pub spender: ethers::core::types::Address,
        pub added_value: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `name`function with signature `name()` and selector `[6, 253, 222, 3]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "name", abi = "name()")]
    pub struct NameCall;
    #[doc = "Container type for all input parameters for the `relayHeader`function with signature `relayHeader(bytes,bytes32[],bytes32[])` and selector `[68, 42, 128, 122]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "relayHeader", abi = "relayHeader(bytes,bytes32[],bytes32[])")]
    pub struct RelayHeaderCall {
        pub header: ethers::core::types::Bytes,
        pub signers: ::std::vec::Vec<[u8; 32]>,
        pub signatures: ::std::vec::Vec<[u8; 32]>,
    }
    #[doc = "Container type for all input parameters for the `relayStakers`function with signature `relayStakers(uint256,bytes32[],uint256[])` and selector `[7, 58, 71, 243]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "relayStakers",
        abi = "relayStakers(uint256,bytes32[],uint256[])"
    )]
    pub struct RelayStakersCall {
        pub epoch: ethers::core::types::U256,
        pub stakers: ::std::vec::Vec<[u8; 32]>,
        pub staker_syms: ::std::vec::Vec<ethers::core::types::U256>,
    }
    #[doc = "Container type for all input parameters for the `symbol`function with signature `symbol()` and selector `[149, 216, 155, 65]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "symbol", abi = "symbol()")]
    pub struct SymbolCall;
    #[doc = "Container type for all input parameters for the `totalSupply`function with signature `totalSupply()` and selector `[24, 22, 13, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "totalSupply", abi = "totalSupply()")]
    pub struct TotalSupplyCall;
    #[doc = "Container type for all input parameters for the `transfer`function with signature `transfer(address,uint256)` and selector `[169, 5, 156, 187]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "transfer", abi = "transfer(address,uint256)")]
    pub struct TransferCall {
        pub to: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `transferFrom`function with signature `transferFrom(address,address,uint256)` and selector `[35, 184, 114, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "transferFrom", abi = "transferFrom(address,address,uint256)")]
    pub struct TransferFromCall {
        pub from: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `verifyTx`function with signature `verifyTx(bytes,uint256,uint256,bytes32[])` and selector `[66, 33, 123, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "verifyTx", abi = "verifyTx(bytes,uint256,uint256,bytes32[])")]
    pub struct VerifyTxCall {
        pub transaction: ethers::core::types::Bytes,
        pub tx_index: ethers::core::types::U256,
        pub block_height: ethers::core::types::U256,
        pub proof: ::std::vec::Vec<[u8; 32]>,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum ThemelioBridgeCalls {
        Allowance(AllowanceCall),
        Approve(ApproveCall),
        BalanceOf(BalanceOfCall),
        Burn(BurnCall),
        Decimals(DecimalsCall),
        DecreaseAllowance(DecreaseAllowanceCall),
        IncreaseAllowance(IncreaseAllowanceCall),
        Name(NameCall),
        RelayHeader(RelayHeaderCall),
        RelayStakers(RelayStakersCall),
        Symbol(SymbolCall),
        TotalSupply(TotalSupplyCall),
        Transfer(TransferCall),
        TransferFrom(TransferFromCall),
        VerifyTx(VerifyTxCall),
    }
    impl ethers::core::abi::AbiDecode for ThemelioBridgeCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AllowanceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::Allowance(decoded));
            }
            if let Ok(decoded) =
                <ApproveCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::Approve(decoded));
            }
            if let Ok(decoded) =
                <BalanceOfCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::BalanceOf(decoded));
            }
            if let Ok(decoded) = <BurnCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(ThemelioBridgeCalls::Burn(decoded));
            }
            if let Ok(decoded) =
                <DecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::Decimals(decoded));
            }
            if let Ok(decoded) =
                <DecreaseAllowanceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::DecreaseAllowance(decoded));
            }
            if let Ok(decoded) =
                <IncreaseAllowanceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::IncreaseAllowance(decoded));
            }
            if let Ok(decoded) = <NameCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(ThemelioBridgeCalls::Name(decoded));
            }
            if let Ok(decoded) =
                <RelayHeaderCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::RelayHeader(decoded));
            }
            if let Ok(decoded) =
                <RelayStakersCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::RelayStakers(decoded));
            }
            if let Ok(decoded) = <SymbolCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::Symbol(decoded));
            }
            if let Ok(decoded) =
                <TotalSupplyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::TotalSupply(decoded));
            }
            if let Ok(decoded) =
                <TransferCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::Transfer(decoded));
            }
            if let Ok(decoded) =
                <TransferFromCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::TransferFrom(decoded));
            }
            if let Ok(decoded) =
                <VerifyTxCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeCalls::VerifyTx(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for ThemelioBridgeCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                ThemelioBridgeCalls::Allowance(element) => element.encode(),
                ThemelioBridgeCalls::Approve(element) => element.encode(),
                ThemelioBridgeCalls::BalanceOf(element) => element.encode(),
                ThemelioBridgeCalls::Burn(element) => element.encode(),
                ThemelioBridgeCalls::Decimals(element) => element.encode(),
                ThemelioBridgeCalls::DecreaseAllowance(element) => element.encode(),
                ThemelioBridgeCalls::IncreaseAllowance(element) => element.encode(),
                ThemelioBridgeCalls::Name(element) => element.encode(),
                ThemelioBridgeCalls::RelayHeader(element) => element.encode(),
                ThemelioBridgeCalls::RelayStakers(element) => element.encode(),
                ThemelioBridgeCalls::Symbol(element) => element.encode(),
                ThemelioBridgeCalls::TotalSupply(element) => element.encode(),
                ThemelioBridgeCalls::Transfer(element) => element.encode(),
                ThemelioBridgeCalls::TransferFrom(element) => element.encode(),
                ThemelioBridgeCalls::VerifyTx(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for ThemelioBridgeCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                ThemelioBridgeCalls::Allowance(element) => element.fmt(f),
                ThemelioBridgeCalls::Approve(element) => element.fmt(f),
                ThemelioBridgeCalls::BalanceOf(element) => element.fmt(f),
                ThemelioBridgeCalls::Burn(element) => element.fmt(f),
                ThemelioBridgeCalls::Decimals(element) => element.fmt(f),
                ThemelioBridgeCalls::DecreaseAllowance(element) => element.fmt(f),
                ThemelioBridgeCalls::IncreaseAllowance(element) => element.fmt(f),
                ThemelioBridgeCalls::Name(element) => element.fmt(f),
                ThemelioBridgeCalls::RelayHeader(element) => element.fmt(f),
                ThemelioBridgeCalls::RelayStakers(element) => element.fmt(f),
                ThemelioBridgeCalls::Symbol(element) => element.fmt(f),
                ThemelioBridgeCalls::TotalSupply(element) => element.fmt(f),
                ThemelioBridgeCalls::Transfer(element) => element.fmt(f),
                ThemelioBridgeCalls::TransferFrom(element) => element.fmt(f),
                ThemelioBridgeCalls::VerifyTx(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AllowanceCall> for ThemelioBridgeCalls {
        fn from(var: AllowanceCall) -> Self {
            ThemelioBridgeCalls::Allowance(var)
        }
    }
    impl ::std::convert::From<ApproveCall> for ThemelioBridgeCalls {
        fn from(var: ApproveCall) -> Self {
            ThemelioBridgeCalls::Approve(var)
        }
    }
    impl ::std::convert::From<BalanceOfCall> for ThemelioBridgeCalls {
        fn from(var: BalanceOfCall) -> Self {
            ThemelioBridgeCalls::BalanceOf(var)
        }
    }
    impl ::std::convert::From<BurnCall> for ThemelioBridgeCalls {
        fn from(var: BurnCall) -> Self {
            ThemelioBridgeCalls::Burn(var)
        }
    }
    impl ::std::convert::From<DecimalsCall> for ThemelioBridgeCalls {
        fn from(var: DecimalsCall) -> Self {
            ThemelioBridgeCalls::Decimals(var)
        }
    }
    impl ::std::convert::From<DecreaseAllowanceCall> for ThemelioBridgeCalls {
        fn from(var: DecreaseAllowanceCall) -> Self {
            ThemelioBridgeCalls::DecreaseAllowance(var)
        }
    }
    impl ::std::convert::From<IncreaseAllowanceCall> for ThemelioBridgeCalls {
        fn from(var: IncreaseAllowanceCall) -> Self {
            ThemelioBridgeCalls::IncreaseAllowance(var)
        }
    }
    impl ::std::convert::From<NameCall> for ThemelioBridgeCalls {
        fn from(var: NameCall) -> Self {
            ThemelioBridgeCalls::Name(var)
        }
    }
    impl ::std::convert::From<RelayHeaderCall> for ThemelioBridgeCalls {
        fn from(var: RelayHeaderCall) -> Self {
            ThemelioBridgeCalls::RelayHeader(var)
        }
    }
    impl ::std::convert::From<RelayStakersCall> for ThemelioBridgeCalls {
        fn from(var: RelayStakersCall) -> Self {
            ThemelioBridgeCalls::RelayStakers(var)
        }
    }
    impl ::std::convert::From<SymbolCall> for ThemelioBridgeCalls {
        fn from(var: SymbolCall) -> Self {
            ThemelioBridgeCalls::Symbol(var)
        }
    }
    impl ::std::convert::From<TotalSupplyCall> for ThemelioBridgeCalls {
        fn from(var: TotalSupplyCall) -> Self {
            ThemelioBridgeCalls::TotalSupply(var)
        }
    }
    impl ::std::convert::From<TransferCall> for ThemelioBridgeCalls {
        fn from(var: TransferCall) -> Self {
            ThemelioBridgeCalls::Transfer(var)
        }
    }
    impl ::std::convert::From<TransferFromCall> for ThemelioBridgeCalls {
        fn from(var: TransferFromCall) -> Self {
            ThemelioBridgeCalls::TransferFrom(var)
        }
    }
    impl ::std::convert::From<VerifyTxCall> for ThemelioBridgeCalls {
        fn from(var: VerifyTxCall) -> Self {
            ThemelioBridgeCalls::VerifyTx(var)
        }
    }
}
