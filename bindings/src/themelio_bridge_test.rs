pub use themeliobridgetest_mod::*;
#[allow(clippy::too_many_arguments)]
mod themeliobridgetest_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "ThemelioBridgeTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static THEMELIOBRIDGETEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Approval\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"HeaderRelayed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32[]\",\"name\":\"stakers\",\"type\":\"bytes32[]\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"symsStaked\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"StakersRelayed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TokensBurned\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TokensMinted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Transfer\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tx_hash\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TxVerified\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burn\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"computeMerkleRootTestHelper\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"decodeIntegerTestHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"extractBlockHeightTestHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"extractValueAndRecipientTestHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header_\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes32[]\",\"name\":\"signers_\",\"type\":\"bytes32[]\",\"components\":[]},{\"internalType\":\"bytes32[]\",\"name\":\"signatures_\",\"type\":\"bytes32[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"relayHeader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"signers\",\"type\":\"bytes32[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"relayHeaderTestHelper\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32[]\",\"name\":\"stakers_\",\"type\":\"bytes32[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"stakerSyms_\",\"type\":\"uint256[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"relayStakers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"relayStakersHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testBlake3Hasher\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testBlake3KeyedHasher\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testDecimals\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testEd25519\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testEncodedIntegerSize\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testExtractMerkleRoot\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testExtractTokenType\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testHashLeaf\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testHashNode\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testSlice\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transaction_\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"txIndex_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"blockHeight_\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"verifyTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"verifyTxTestHelper\",\"outputs\":[]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static THEMELIOBRIDGETEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct ThemelioBridgeTest<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for ThemelioBridgeTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for ThemelioBridgeTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(ThemelioBridgeTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> ThemelioBridgeTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), THEMELIOBRIDGETEST_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                THEMELIOBRIDGETEST_ABI.clone(),
                THEMELIOBRIDGETEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `allowance` (0xdd62ed3e) function"]
        pub fn allowance(
            &self,
            owner: ethers::core::types::Address,
            spender: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([221, 98, 237, 62], (owner, spender))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `approve` (0x095ea7b3) function"]
        pub fn approve(
            &self,
            spender: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([9, 94, 167, 179], (spender, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `balanceOf` (0x70a08231) function"]
        pub fn balance_of(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([112, 160, 130, 49], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `burn` (0x42966c68) function"]
        pub fn burn(
            &self,
            value: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([66, 150, 108, 104], value)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `computeMerkleRootTestHelper` (0xd8626f36) function"]
        pub fn compute_merkle_root_test_helper(
            &self,
            header: ethers::core::types::Bytes,
            block_height: ethers::core::types::U256,
            tx_hash: [u8; 32],
            index: ethers::core::types::U256,
            proof: ::std::vec::Vec<[u8; 32]>,
        ) -> ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash(
                    [216, 98, 111, 54],
                    (header, block_height, tx_hash, index, proof),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `decimals` (0x313ce567) function"]
        pub fn decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([49, 60, 229, 103], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `decodeIntegerTestHelper` (0x14229b63) function"]
        pub fn decode_integer_test_helper(
            &self,
            header: ethers::core::types::Bytes,
            offset: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([20, 34, 155, 99], (header, offset))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `decreaseAllowance` (0xa457c2d7) function"]
        pub fn decrease_allowance(
            &self,
            spender: ethers::core::types::Address,
            subtracted_value: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([164, 87, 194, 215], (spender, subtracted_value))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `extractBlockHeightTestHelper` (0x0f9d0d47) function"]
        pub fn extract_block_height_test_helper(
            &self,
            header: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([15, 157, 13, 71], header)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `extractValueAndRecipientTestHelper` (0x679c917c) function"]
        pub fn extract_value_and_recipient_test_helper(
            &self,
            transaction: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::U256, ethers::core::types::Address),
        > {
            self.0
                .method_hash([103, 156, 145, 124], transaction)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `increaseAllowance` (0x39509351) function"]
        pub fn increase_allowance(
            &self,
            spender: ethers::core::types::Address,
            added_value: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([57, 80, 147, 81], (spender, added_value))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `name` (0x06fdde03) function"]
        pub fn name(&self) -> ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([6, 253, 222, 3], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `relayHeader` (0x442a807a) function"]
        pub fn relay_header(
            &self,
            header: ethers::core::types::Bytes,
            signers: ::std::vec::Vec<[u8; 32]>,
            signatures: ::std::vec::Vec<[u8; 32]>,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([68, 42, 128, 122], (header, signers, signatures))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `relayHeaderTestHelper` (0x852418ba) function"]
        pub fn relay_header_test_helper(
            &self,
            signers: ::std::vec::Vec<[u8; 32]>,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([133, 36, 24, 186], signers)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `relayStakers` (0x073a47f3) function"]
        pub fn relay_stakers(
            &self,
            epoch: ethers::core::types::U256,
            stakers: ::std::vec::Vec<[u8; 32]>,
            staker_syms: ::std::vec::Vec<ethers::core::types::U256>,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([7, 58, 71, 243], (epoch, stakers, staker_syms))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `relayStakersHelper` (0xf7842f2d) function"]
        pub fn relay_stakers_helper(
            &self,
            epoch: ethers::core::types::U256,
            staker: [u8; 32],
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::U256, ethers::core::types::U256),
        > {
            self.0
                .method_hash([247, 132, 47, 45], (epoch, staker))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `symbol` (0x95d89b41) function"]
        pub fn symbol(&self) -> ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([149, 216, 155, 65], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testBlake3Hasher` (0x07e075b4) function"]
        pub fn test_blake_3_hasher(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([7, 224, 117, 180], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testBlake3KeyedHasher` (0x51ee9269) function"]
        pub fn test_blake_3_keyed_hasher(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([81, 238, 146, 105], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testDecimals` (0x5d4696cf) function"]
        pub fn test_decimals(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([93, 70, 150, 207], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testEd25519` (0xb2d7ee31) function"]
        pub fn test_ed_25519(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([178, 215, 238, 49], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testEncodedIntegerSize` (0x2993c221) function"]
        pub fn test_encoded_integer_size(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 147, 194, 33], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testExtractMerkleRoot` (0xd6004d51) function"]
        pub fn test_extract_merkle_root(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([214, 0, 77, 81], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testExtractTokenType` (0xa797dccb) function"]
        pub fn test_extract_token_type(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([167, 151, 220, 203], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testHashLeaf` (0xefb2d32f) function"]
        pub fn test_hash_leaf(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([239, 178, 211, 47], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testHashNode` (0xf34d5c4a) function"]
        pub fn test_hash_node(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([243, 77, 92, 74], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testSlice` (0xe27c5b17) function"]
        pub fn test_slice(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([226, 124, 91, 23], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `totalSupply` (0x18160ddd) function"]
        pub fn total_supply(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([24, 22, 13, 221], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transfer` (0xa9059cbb) function"]
        pub fn transfer(
            &self,
            to: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([169, 5, 156, 187], (to, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferFrom` (0x23b872dd) function"]
        pub fn transfer_from(
            &self,
            from: ethers::core::types::Address,
            to: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([35, 184, 114, 221], (from, to, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `verifyTx` (0x42217b63) function"]
        pub fn verify_tx(
            &self,
            transaction: ethers::core::types::Bytes,
            tx_index: ethers::core::types::U256,
            block_height: ethers::core::types::U256,
            proof: ::std::vec::Vec<[u8; 32]>,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash(
                    [66, 33, 123, 99],
                    (transaction, tx_index, block_height, proof),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `verifyTxTestHelper` (0x9f84cd1d) function"]
        pub fn verify_tx_test_helper(
            &self,
            header: ethers::core::types::Bytes,
            block_height: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([159, 132, 205, 29], (header, block_height))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `Approval` event"]
        pub fn approval_filter(&self) -> ethers::contract::builders::Event<M, ApprovalFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `HeaderRelayed` event"]
        pub fn header_relayed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, HeaderRelayedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `StakersRelayed` event"]
        pub fn stakers_relayed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, StakersRelayedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokensBurned` event"]
        pub fn tokens_burned_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokensBurnedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokensMinted` event"]
        pub fn tokens_minted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokensMintedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Transfer` event"]
        pub fn transfer_filter(&self) -> ethers::contract::builders::Event<M, TransferFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TxVerified` event"]
        pub fn tx_verified_filter(&self) -> ethers::contract::builders::Event<M, TxVerifiedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, ThemelioBridgeTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for ThemelioBridgeTest<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Approval", abi = "Approval(address,address,uint256)")]
    pub struct ApprovalFilter {
        #[ethevent(indexed)]
        pub owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub spender: ethers::core::types::Address,
        pub value: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "HeaderRelayed", abi = "HeaderRelayed(uint256)")]
    pub struct HeaderRelayedFilter {
        #[ethevent(indexed)]
        pub height: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "StakersRelayed",
        abi = "StakersRelayed(uint256,bytes32[],uint256[])"
    )]
    pub struct StakersRelayedFilter {
        #[ethevent(indexed)]
        pub epoch: ethers::core::types::U256,
        pub stakers: Vec<[u8; 32]>,
        pub syms_staked: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokensBurned", abi = "TokensBurned(address,uint256)")]
    pub struct TokensBurnedFilter {
        #[ethevent(indexed)]
        pub recipient: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub value: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokensMinted", abi = "TokensMinted(address,uint256)")]
    pub struct TokensMintedFilter {
        #[ethevent(indexed)]
        pub recipient: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub value: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Transfer", abi = "Transfer(address,address,uint256)")]
    pub struct TransferFilter {
        #[ethevent(indexed)]
        pub from: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ethers::core::types::Address,
        pub value: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TxVerified", abi = "TxVerified(bytes32,uint256)")]
    pub struct TxVerifiedFilter {
        #[ethevent(indexed)]
        pub tx_hash: [u8; 32],
        #[ethevent(indexed)]
        pub height: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum ThemelioBridgeTestEvents {
        ApprovalFilter(ApprovalFilter),
        HeaderRelayedFilter(HeaderRelayedFilter),
        StakersRelayedFilter(StakersRelayedFilter),
        TokensBurnedFilter(TokensBurnedFilter),
        TokensMintedFilter(TokensMintedFilter),
        TransferFilter(TransferFilter),
        TxVerifiedFilter(TxVerifiedFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for ThemelioBridgeTestEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = ApprovalFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::ApprovalFilter(decoded));
            }
            if let Ok(decoded) = HeaderRelayedFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::HeaderRelayedFilter(decoded));
            }
            if let Ok(decoded) = StakersRelayedFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::StakersRelayedFilter(decoded));
            }
            if let Ok(decoded) = TokensBurnedFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::TokensBurnedFilter(decoded));
            }
            if let Ok(decoded) = TokensMintedFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::TokensMintedFilter(decoded));
            }
            if let Ok(decoded) = TransferFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::TransferFilter(decoded));
            }
            if let Ok(decoded) = TxVerifiedFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::TxVerifiedFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(ThemelioBridgeTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for ThemelioBridgeTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                ThemelioBridgeTestEvents::ApprovalFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::HeaderRelayedFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::StakersRelayedFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::TokensBurnedFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::TokensMintedFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::TransferFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::TxVerifiedFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogAddressFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogBytesFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogBytes32Filter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogIntFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogStringFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogUintFilter(element) => element.fmt(f),
                ThemelioBridgeTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `allowance`function with signature `allowance(address,address)` and selector `[221, 98, 237, 62]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "allowance", abi = "allowance(address,address)")]
    pub struct AllowanceCall {
        pub owner: ethers::core::types::Address,
        pub spender: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `approve`function with signature `approve(address,uint256)` and selector `[9, 94, 167, 179]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "approve", abi = "approve(address,uint256)")]
    pub struct ApproveCall {
        pub spender: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `balanceOf`function with signature `balanceOf(address)` and selector `[112, 160, 130, 49]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "balanceOf", abi = "balanceOf(address)")]
    pub struct BalanceOfCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `burn`function with signature `burn(uint256)` and selector `[66, 150, 108, 104]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "burn", abi = "burn(uint256)")]
    pub struct BurnCall {
        pub value: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `computeMerkleRootTestHelper`function with signature `computeMerkleRootTestHelper(bytes,uint256,bytes32,uint256,bytes32[])` and selector `[216, 98, 111, 54]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "computeMerkleRootTestHelper",
        abi = "computeMerkleRootTestHelper(bytes,uint256,bytes32,uint256,bytes32[])"
    )]
    pub struct ComputeMerkleRootTestHelperCall {
        pub header: ethers::core::types::Bytes,
        pub block_height: ethers::core::types::U256,
        pub tx_hash: [u8; 32],
        pub index: ethers::core::types::U256,
        pub proof: ::std::vec::Vec<[u8; 32]>,
    }
    #[doc = "Container type for all input parameters for the `decimals`function with signature `decimals()` and selector `[49, 60, 229, 103]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "decimals", abi = "decimals()")]
    pub struct DecimalsCall;
    #[doc = "Container type for all input parameters for the `decodeIntegerTestHelper`function with signature `decodeIntegerTestHelper(bytes,uint256)` and selector `[20, 34, 155, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "decodeIntegerTestHelper",
        abi = "decodeIntegerTestHelper(bytes,uint256)"
    )]
    pub struct DecodeIntegerTestHelperCall {
        pub header: ethers::core::types::Bytes,
        pub offset: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `decreaseAllowance`function with signature `decreaseAllowance(address,uint256)` and selector `[164, 87, 194, 215]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "decreaseAllowance", abi = "decreaseAllowance(address,uint256)")]
    pub struct DecreaseAllowanceCall {
        pub spender: ethers::core::types::Address,
        pub subtracted_value: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `extractBlockHeightTestHelper`function with signature `extractBlockHeightTestHelper(bytes)` and selector `[15, 157, 13, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "extractBlockHeightTestHelper",
        abi = "extractBlockHeightTestHelper(bytes)"
    )]
    pub struct ExtractBlockHeightTestHelperCall {
        pub header: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `extractValueAndRecipientTestHelper`function with signature `extractValueAndRecipientTestHelper(bytes)` and selector `[103, 156, 145, 124]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "extractValueAndRecipientTestHelper",
        abi = "extractValueAndRecipientTestHelper(bytes)"
    )]
    pub struct ExtractValueAndRecipientTestHelperCall {
        pub transaction: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `increaseAllowance`function with signature `increaseAllowance(address,uint256)` and selector `[57, 80, 147, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "increaseAllowance", abi = "increaseAllowance(address,uint256)")]
    pub struct IncreaseAllowanceCall {
        pub spender: ethers::core::types::Address,
        pub added_value: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `name`function with signature `name()` and selector `[6, 253, 222, 3]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "name", abi = "name()")]
    pub struct NameCall;
    #[doc = "Container type for all input parameters for the `relayHeader`function with signature `relayHeader(bytes,bytes32[],bytes32[])` and selector `[68, 42, 128, 122]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "relayHeader", abi = "relayHeader(bytes,bytes32[],bytes32[])")]
    pub struct RelayHeaderCall {
        pub header: ethers::core::types::Bytes,
        pub signers: ::std::vec::Vec<[u8; 32]>,
        pub signatures: ::std::vec::Vec<[u8; 32]>,
    }
    #[doc = "Container type for all input parameters for the `relayHeaderTestHelper`function with signature `relayHeaderTestHelper(bytes32[])` and selector `[133, 36, 24, 186]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "relayHeaderTestHelper",
        abi = "relayHeaderTestHelper(bytes32[])"
    )]
    pub struct RelayHeaderTestHelperCall {
        pub signers: ::std::vec::Vec<[u8; 32]>,
    }
    #[doc = "Container type for all input parameters for the `relayStakers`function with signature `relayStakers(uint256,bytes32[],uint256[])` and selector `[7, 58, 71, 243]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "relayStakers",
        abi = "relayStakers(uint256,bytes32[],uint256[])"
    )]
    pub struct RelayStakersCall {
        pub epoch: ethers::core::types::U256,
        pub stakers: ::std::vec::Vec<[u8; 32]>,
        pub staker_syms: ::std::vec::Vec<ethers::core::types::U256>,
    }
    #[doc = "Container type for all input parameters for the `relayStakersHelper`function with signature `relayStakersHelper(uint256,bytes32)` and selector `[247, 132, 47, 45]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "relayStakersHelper",
        abi = "relayStakersHelper(uint256,bytes32)"
    )]
    pub struct RelayStakersHelperCall {
        pub epoch: ethers::core::types::U256,
        pub staker: [u8; 32],
    }
    #[doc = "Container type for all input parameters for the `symbol`function with signature `symbol()` and selector `[149, 216, 155, 65]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "symbol", abi = "symbol()")]
    pub struct SymbolCall;
    #[doc = "Container type for all input parameters for the `testBlake3Hasher`function with signature `testBlake3Hasher()` and selector `[7, 224, 117, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testBlake3Hasher", abi = "testBlake3Hasher()")]
    pub struct TestBlake3HasherCall;
    #[doc = "Container type for all input parameters for the `testBlake3KeyedHasher`function with signature `testBlake3KeyedHasher()` and selector `[81, 238, 146, 105]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testBlake3KeyedHasher", abi = "testBlake3KeyedHasher()")]
    pub struct TestBlake3KeyedHasherCall;
    #[doc = "Container type for all input parameters for the `testDecimals`function with signature `testDecimals()` and selector `[93, 70, 150, 207]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testDecimals", abi = "testDecimals()")]
    pub struct TestDecimalsCall;
    #[doc = "Container type for all input parameters for the `testEd25519`function with signature `testEd25519()` and selector `[178, 215, 238, 49]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testEd25519", abi = "testEd25519()")]
    pub struct TestEd25519Call;
    #[doc = "Container type for all input parameters for the `testEncodedIntegerSize`function with signature `testEncodedIntegerSize()` and selector `[41, 147, 194, 33]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testEncodedIntegerSize", abi = "testEncodedIntegerSize()")]
    pub struct TestEncodedIntegerSizeCall;
    #[doc = "Container type for all input parameters for the `testExtractMerkleRoot`function with signature `testExtractMerkleRoot()` and selector `[214, 0, 77, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testExtractMerkleRoot", abi = "testExtractMerkleRoot()")]
    pub struct TestExtractMerkleRootCall;
    #[doc = "Container type for all input parameters for the `testExtractTokenType`function with signature `testExtractTokenType()` and selector `[167, 151, 220, 203]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testExtractTokenType", abi = "testExtractTokenType()")]
    pub struct TestExtractTokenTypeCall;
    #[doc = "Container type for all input parameters for the `testHashLeaf`function with signature `testHashLeaf()` and selector `[239, 178, 211, 47]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testHashLeaf", abi = "testHashLeaf()")]
    pub struct TestHashLeafCall;
    #[doc = "Container type for all input parameters for the `testHashNode`function with signature `testHashNode()` and selector `[243, 77, 92, 74]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testHashNode", abi = "testHashNode()")]
    pub struct TestHashNodeCall;
    #[doc = "Container type for all input parameters for the `testSlice`function with signature `testSlice()` and selector `[226, 124, 91, 23]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testSlice", abi = "testSlice()")]
    pub struct TestSliceCall;
    #[doc = "Container type for all input parameters for the `totalSupply`function with signature `totalSupply()` and selector `[24, 22, 13, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "totalSupply", abi = "totalSupply()")]
    pub struct TotalSupplyCall;
    #[doc = "Container type for all input parameters for the `transfer`function with signature `transfer(address,uint256)` and selector `[169, 5, 156, 187]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "transfer", abi = "transfer(address,uint256)")]
    pub struct TransferCall {
        pub to: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `transferFrom`function with signature `transferFrom(address,address,uint256)` and selector `[35, 184, 114, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "transferFrom", abi = "transferFrom(address,address,uint256)")]
    pub struct TransferFromCall {
        pub from: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `verifyTx`function with signature `verifyTx(bytes,uint256,uint256,bytes32[])` and selector `[66, 33, 123, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "verifyTx", abi = "verifyTx(bytes,uint256,uint256,bytes32[])")]
    pub struct VerifyTxCall {
        pub transaction: ethers::core::types::Bytes,
        pub tx_index: ethers::core::types::U256,
        pub block_height: ethers::core::types::U256,
        pub proof: ::std::vec::Vec<[u8; 32]>,
    }
    #[doc = "Container type for all input parameters for the `verifyTxTestHelper`function with signature `verifyTxTestHelper(bytes,uint256)` and selector `[159, 132, 205, 29]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "verifyTxTestHelper", abi = "verifyTxTestHelper(bytes,uint256)")]
    pub struct VerifyTxTestHelperCall {
        pub header: ethers::core::types::Bytes,
        pub block_height: ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum ThemelioBridgeTestCalls {
        IsTest(IsTestCall),
        Allowance(AllowanceCall),
        Approve(ApproveCall),
        BalanceOf(BalanceOfCall),
        Burn(BurnCall),
        ComputeMerkleRootTestHelper(ComputeMerkleRootTestHelperCall),
        Decimals(DecimalsCall),
        DecodeIntegerTestHelper(DecodeIntegerTestHelperCall),
        DecreaseAllowance(DecreaseAllowanceCall),
        ExtractBlockHeightTestHelper(ExtractBlockHeightTestHelperCall),
        ExtractValueAndRecipientTestHelper(ExtractValueAndRecipientTestHelperCall),
        Failed(FailedCall),
        IncreaseAllowance(IncreaseAllowanceCall),
        Name(NameCall),
        RelayHeader(RelayHeaderCall),
        RelayHeaderTestHelper(RelayHeaderTestHelperCall),
        RelayStakers(RelayStakersCall),
        RelayStakersHelper(RelayStakersHelperCall),
        Symbol(SymbolCall),
        TestBlake3Hasher(TestBlake3HasherCall),
        TestBlake3KeyedHasher(TestBlake3KeyedHasherCall),
        TestDecimals(TestDecimalsCall),
        TestEd25519(TestEd25519Call),
        TestEncodedIntegerSize(TestEncodedIntegerSizeCall),
        TestExtractMerkleRoot(TestExtractMerkleRootCall),
        TestExtractTokenType(TestExtractTokenTypeCall),
        TestHashLeaf(TestHashLeafCall),
        TestHashNode(TestHashNodeCall),
        TestSlice(TestSliceCall),
        TotalSupply(TotalSupplyCall),
        Transfer(TransferCall),
        TransferFrom(TransferFromCall),
        VerifyTx(VerifyTxCall),
        VerifyTxTestHelper(VerifyTxTestHelperCall),
    }
    impl ethers::core::abi::AbiDecode for ThemelioBridgeTestCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) =
                <AllowanceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::Allowance(decoded));
            }
            if let Ok(decoded) =
                <ApproveCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::Approve(decoded));
            }
            if let Ok(decoded) =
                <BalanceOfCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::BalanceOf(decoded));
            }
            if let Ok(decoded) = <BurnCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(ThemelioBridgeTestCalls::Burn(decoded));
            }
            if let Ok(decoded) =
                <ComputeMerkleRootTestHelperCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(ThemelioBridgeTestCalls::ComputeMerkleRootTestHelper(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <DecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::Decimals(decoded));
            }
            if let Ok(decoded) =
                <DecodeIntegerTestHelperCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::DecodeIntegerTestHelper(decoded));
            }
            if let Ok(decoded) =
                <DecreaseAllowanceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::DecreaseAllowance(decoded));
            }
            if let Ok(decoded) =
                <ExtractBlockHeightTestHelperCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(ThemelioBridgeTestCalls::ExtractBlockHeightTestHelper(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <ExtractValueAndRecipientTestHelperCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(ThemelioBridgeTestCalls::ExtractValueAndRecipientTestHelper(
                    decoded,
                ));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::Failed(decoded));
            }
            if let Ok(decoded) =
                <IncreaseAllowanceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::IncreaseAllowance(decoded));
            }
            if let Ok(decoded) = <NameCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(ThemelioBridgeTestCalls::Name(decoded));
            }
            if let Ok(decoded) =
                <RelayHeaderCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::RelayHeader(decoded));
            }
            if let Ok(decoded) =
                <RelayHeaderTestHelperCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::RelayHeaderTestHelper(decoded));
            }
            if let Ok(decoded) =
                <RelayStakersCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::RelayStakers(decoded));
            }
            if let Ok(decoded) =
                <RelayStakersHelperCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::RelayStakersHelper(decoded));
            }
            if let Ok(decoded) = <SymbolCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::Symbol(decoded));
            }
            if let Ok(decoded) =
                <TestBlake3HasherCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::TestBlake3Hasher(decoded));
            }
            if let Ok(decoded) =
                <TestBlake3KeyedHasherCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::TestBlake3KeyedHasher(decoded));
            }
            if let Ok(decoded) =
                <TestDecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::TestDecimals(decoded));
            }
            if let Ok(decoded) =
                <TestEd25519Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::TestEd25519(decoded));
            }
            if let Ok(decoded) =
                <TestEncodedIntegerSizeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::TestEncodedIntegerSize(decoded));
            }
            if let Ok(decoded) =
                <TestExtractMerkleRootCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::TestExtractMerkleRoot(decoded));
            }
            if let Ok(decoded) =
                <TestExtractTokenTypeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::TestExtractTokenType(decoded));
            }
            if let Ok(decoded) =
                <TestHashLeafCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::TestHashLeaf(decoded));
            }
            if let Ok(decoded) =
                <TestHashNodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::TestHashNode(decoded));
            }
            if let Ok(decoded) =
                <TestSliceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::TestSlice(decoded));
            }
            if let Ok(decoded) =
                <TotalSupplyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::TotalSupply(decoded));
            }
            if let Ok(decoded) =
                <TransferCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::Transfer(decoded));
            }
            if let Ok(decoded) =
                <TransferFromCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::TransferFrom(decoded));
            }
            if let Ok(decoded) =
                <VerifyTxCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::VerifyTx(decoded));
            }
            if let Ok(decoded) =
                <VerifyTxTestHelperCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ThemelioBridgeTestCalls::VerifyTxTestHelper(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for ThemelioBridgeTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                ThemelioBridgeTestCalls::IsTest(element) => element.encode(),
                ThemelioBridgeTestCalls::Allowance(element) => element.encode(),
                ThemelioBridgeTestCalls::Approve(element) => element.encode(),
                ThemelioBridgeTestCalls::BalanceOf(element) => element.encode(),
                ThemelioBridgeTestCalls::Burn(element) => element.encode(),
                ThemelioBridgeTestCalls::ComputeMerkleRootTestHelper(element) => element.encode(),
                ThemelioBridgeTestCalls::Decimals(element) => element.encode(),
                ThemelioBridgeTestCalls::DecodeIntegerTestHelper(element) => element.encode(),
                ThemelioBridgeTestCalls::DecreaseAllowance(element) => element.encode(),
                ThemelioBridgeTestCalls::ExtractBlockHeightTestHelper(element) => element.encode(),
                ThemelioBridgeTestCalls::ExtractValueAndRecipientTestHelper(element) => {
                    element.encode()
                }
                ThemelioBridgeTestCalls::Failed(element) => element.encode(),
                ThemelioBridgeTestCalls::IncreaseAllowance(element) => element.encode(),
                ThemelioBridgeTestCalls::Name(element) => element.encode(),
                ThemelioBridgeTestCalls::RelayHeader(element) => element.encode(),
                ThemelioBridgeTestCalls::RelayHeaderTestHelper(element) => element.encode(),
                ThemelioBridgeTestCalls::RelayStakers(element) => element.encode(),
                ThemelioBridgeTestCalls::RelayStakersHelper(element) => element.encode(),
                ThemelioBridgeTestCalls::Symbol(element) => element.encode(),
                ThemelioBridgeTestCalls::TestBlake3Hasher(element) => element.encode(),
                ThemelioBridgeTestCalls::TestBlake3KeyedHasher(element) => element.encode(),
                ThemelioBridgeTestCalls::TestDecimals(element) => element.encode(),
                ThemelioBridgeTestCalls::TestEd25519(element) => element.encode(),
                ThemelioBridgeTestCalls::TestEncodedIntegerSize(element) => element.encode(),
                ThemelioBridgeTestCalls::TestExtractMerkleRoot(element) => element.encode(),
                ThemelioBridgeTestCalls::TestExtractTokenType(element) => element.encode(),
                ThemelioBridgeTestCalls::TestHashLeaf(element) => element.encode(),
                ThemelioBridgeTestCalls::TestHashNode(element) => element.encode(),
                ThemelioBridgeTestCalls::TestSlice(element) => element.encode(),
                ThemelioBridgeTestCalls::TotalSupply(element) => element.encode(),
                ThemelioBridgeTestCalls::Transfer(element) => element.encode(),
                ThemelioBridgeTestCalls::TransferFrom(element) => element.encode(),
                ThemelioBridgeTestCalls::VerifyTx(element) => element.encode(),
                ThemelioBridgeTestCalls::VerifyTxTestHelper(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for ThemelioBridgeTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                ThemelioBridgeTestCalls::IsTest(element) => element.fmt(f),
                ThemelioBridgeTestCalls::Allowance(element) => element.fmt(f),
                ThemelioBridgeTestCalls::Approve(element) => element.fmt(f),
                ThemelioBridgeTestCalls::BalanceOf(element) => element.fmt(f),
                ThemelioBridgeTestCalls::Burn(element) => element.fmt(f),
                ThemelioBridgeTestCalls::ComputeMerkleRootTestHelper(element) => element.fmt(f),
                ThemelioBridgeTestCalls::Decimals(element) => element.fmt(f),
                ThemelioBridgeTestCalls::DecodeIntegerTestHelper(element) => element.fmt(f),
                ThemelioBridgeTestCalls::DecreaseAllowance(element) => element.fmt(f),
                ThemelioBridgeTestCalls::ExtractBlockHeightTestHelper(element) => element.fmt(f),
                ThemelioBridgeTestCalls::ExtractValueAndRecipientTestHelper(element) => {
                    element.fmt(f)
                }
                ThemelioBridgeTestCalls::Failed(element) => element.fmt(f),
                ThemelioBridgeTestCalls::IncreaseAllowance(element) => element.fmt(f),
                ThemelioBridgeTestCalls::Name(element) => element.fmt(f),
                ThemelioBridgeTestCalls::RelayHeader(element) => element.fmt(f),
                ThemelioBridgeTestCalls::RelayHeaderTestHelper(element) => element.fmt(f),
                ThemelioBridgeTestCalls::RelayStakers(element) => element.fmt(f),
                ThemelioBridgeTestCalls::RelayStakersHelper(element) => element.fmt(f),
                ThemelioBridgeTestCalls::Symbol(element) => element.fmt(f),
                ThemelioBridgeTestCalls::TestBlake3Hasher(element) => element.fmt(f),
                ThemelioBridgeTestCalls::TestBlake3KeyedHasher(element) => element.fmt(f),
                ThemelioBridgeTestCalls::TestDecimals(element) => element.fmt(f),
                ThemelioBridgeTestCalls::TestEd25519(element) => element.fmt(f),
                ThemelioBridgeTestCalls::TestEncodedIntegerSize(element) => element.fmt(f),
                ThemelioBridgeTestCalls::TestExtractMerkleRoot(element) => element.fmt(f),
                ThemelioBridgeTestCalls::TestExtractTokenType(element) => element.fmt(f),
                ThemelioBridgeTestCalls::TestHashLeaf(element) => element.fmt(f),
                ThemelioBridgeTestCalls::TestHashNode(element) => element.fmt(f),
                ThemelioBridgeTestCalls::TestSlice(element) => element.fmt(f),
                ThemelioBridgeTestCalls::TotalSupply(element) => element.fmt(f),
                ThemelioBridgeTestCalls::Transfer(element) => element.fmt(f),
                ThemelioBridgeTestCalls::TransferFrom(element) => element.fmt(f),
                ThemelioBridgeTestCalls::VerifyTx(element) => element.fmt(f),
                ThemelioBridgeTestCalls::VerifyTxTestHelper(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for ThemelioBridgeTestCalls {
        fn from(var: IsTestCall) -> Self {
            ThemelioBridgeTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<AllowanceCall> for ThemelioBridgeTestCalls {
        fn from(var: AllowanceCall) -> Self {
            ThemelioBridgeTestCalls::Allowance(var)
        }
    }
    impl ::std::convert::From<ApproveCall> for ThemelioBridgeTestCalls {
        fn from(var: ApproveCall) -> Self {
            ThemelioBridgeTestCalls::Approve(var)
        }
    }
    impl ::std::convert::From<BalanceOfCall> for ThemelioBridgeTestCalls {
        fn from(var: BalanceOfCall) -> Self {
            ThemelioBridgeTestCalls::BalanceOf(var)
        }
    }
    impl ::std::convert::From<BurnCall> for ThemelioBridgeTestCalls {
        fn from(var: BurnCall) -> Self {
            ThemelioBridgeTestCalls::Burn(var)
        }
    }
    impl ::std::convert::From<ComputeMerkleRootTestHelperCall> for ThemelioBridgeTestCalls {
        fn from(var: ComputeMerkleRootTestHelperCall) -> Self {
            ThemelioBridgeTestCalls::ComputeMerkleRootTestHelper(var)
        }
    }
    impl ::std::convert::From<DecimalsCall> for ThemelioBridgeTestCalls {
        fn from(var: DecimalsCall) -> Self {
            ThemelioBridgeTestCalls::Decimals(var)
        }
    }
    impl ::std::convert::From<DecodeIntegerTestHelperCall> for ThemelioBridgeTestCalls {
        fn from(var: DecodeIntegerTestHelperCall) -> Self {
            ThemelioBridgeTestCalls::DecodeIntegerTestHelper(var)
        }
    }
    impl ::std::convert::From<DecreaseAllowanceCall> for ThemelioBridgeTestCalls {
        fn from(var: DecreaseAllowanceCall) -> Self {
            ThemelioBridgeTestCalls::DecreaseAllowance(var)
        }
    }
    impl ::std::convert::From<ExtractBlockHeightTestHelperCall> for ThemelioBridgeTestCalls {
        fn from(var: ExtractBlockHeightTestHelperCall) -> Self {
            ThemelioBridgeTestCalls::ExtractBlockHeightTestHelper(var)
        }
    }
    impl ::std::convert::From<ExtractValueAndRecipientTestHelperCall> for ThemelioBridgeTestCalls {
        fn from(var: ExtractValueAndRecipientTestHelperCall) -> Self {
            ThemelioBridgeTestCalls::ExtractValueAndRecipientTestHelper(var)
        }
    }
    impl ::std::convert::From<FailedCall> for ThemelioBridgeTestCalls {
        fn from(var: FailedCall) -> Self {
            ThemelioBridgeTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<IncreaseAllowanceCall> for ThemelioBridgeTestCalls {
        fn from(var: IncreaseAllowanceCall) -> Self {
            ThemelioBridgeTestCalls::IncreaseAllowance(var)
        }
    }
    impl ::std::convert::From<NameCall> for ThemelioBridgeTestCalls {
        fn from(var: NameCall) -> Self {
            ThemelioBridgeTestCalls::Name(var)
        }
    }
    impl ::std::convert::From<RelayHeaderCall> for ThemelioBridgeTestCalls {
        fn from(var: RelayHeaderCall) -> Self {
            ThemelioBridgeTestCalls::RelayHeader(var)
        }
    }
    impl ::std::convert::From<RelayHeaderTestHelperCall> for ThemelioBridgeTestCalls {
        fn from(var: RelayHeaderTestHelperCall) -> Self {
            ThemelioBridgeTestCalls::RelayHeaderTestHelper(var)
        }
    }
    impl ::std::convert::From<RelayStakersCall> for ThemelioBridgeTestCalls {
        fn from(var: RelayStakersCall) -> Self {
            ThemelioBridgeTestCalls::RelayStakers(var)
        }
    }
    impl ::std::convert::From<RelayStakersHelperCall> for ThemelioBridgeTestCalls {
        fn from(var: RelayStakersHelperCall) -> Self {
            ThemelioBridgeTestCalls::RelayStakersHelper(var)
        }
    }
    impl ::std::convert::From<SymbolCall> for ThemelioBridgeTestCalls {
        fn from(var: SymbolCall) -> Self {
            ThemelioBridgeTestCalls::Symbol(var)
        }
    }
    impl ::std::convert::From<TestBlake3HasherCall> for ThemelioBridgeTestCalls {
        fn from(var: TestBlake3HasherCall) -> Self {
            ThemelioBridgeTestCalls::TestBlake3Hasher(var)
        }
    }
    impl ::std::convert::From<TestBlake3KeyedHasherCall> for ThemelioBridgeTestCalls {
        fn from(var: TestBlake3KeyedHasherCall) -> Self {
            ThemelioBridgeTestCalls::TestBlake3KeyedHasher(var)
        }
    }
    impl ::std::convert::From<TestDecimalsCall> for ThemelioBridgeTestCalls {
        fn from(var: TestDecimalsCall) -> Self {
            ThemelioBridgeTestCalls::TestDecimals(var)
        }
    }
    impl ::std::convert::From<TestEd25519Call> for ThemelioBridgeTestCalls {
        fn from(var: TestEd25519Call) -> Self {
            ThemelioBridgeTestCalls::TestEd25519(var)
        }
    }
    impl ::std::convert::From<TestEncodedIntegerSizeCall> for ThemelioBridgeTestCalls {
        fn from(var: TestEncodedIntegerSizeCall) -> Self {
            ThemelioBridgeTestCalls::TestEncodedIntegerSize(var)
        }
    }
    impl ::std::convert::From<TestExtractMerkleRootCall> for ThemelioBridgeTestCalls {
        fn from(var: TestExtractMerkleRootCall) -> Self {
            ThemelioBridgeTestCalls::TestExtractMerkleRoot(var)
        }
    }
    impl ::std::convert::From<TestExtractTokenTypeCall> for ThemelioBridgeTestCalls {
        fn from(var: TestExtractTokenTypeCall) -> Self {
            ThemelioBridgeTestCalls::TestExtractTokenType(var)
        }
    }
    impl ::std::convert::From<TestHashLeafCall> for ThemelioBridgeTestCalls {
        fn from(var: TestHashLeafCall) -> Self {
            ThemelioBridgeTestCalls::TestHashLeaf(var)
        }
    }
    impl ::std::convert::From<TestHashNodeCall> for ThemelioBridgeTestCalls {
        fn from(var: TestHashNodeCall) -> Self {
            ThemelioBridgeTestCalls::TestHashNode(var)
        }
    }
    impl ::std::convert::From<TestSliceCall> for ThemelioBridgeTestCalls {
        fn from(var: TestSliceCall) -> Self {
            ThemelioBridgeTestCalls::TestSlice(var)
        }
    }
    impl ::std::convert::From<TotalSupplyCall> for ThemelioBridgeTestCalls {
        fn from(var: TotalSupplyCall) -> Self {
            ThemelioBridgeTestCalls::TotalSupply(var)
        }
    }
    impl ::std::convert::From<TransferCall> for ThemelioBridgeTestCalls {
        fn from(var: TransferCall) -> Self {
            ThemelioBridgeTestCalls::Transfer(var)
        }
    }
    impl ::std::convert::From<TransferFromCall> for ThemelioBridgeTestCalls {
        fn from(var: TransferFromCall) -> Self {
            ThemelioBridgeTestCalls::TransferFrom(var)
        }
    }
    impl ::std::convert::From<VerifyTxCall> for ThemelioBridgeTestCalls {
        fn from(var: VerifyTxCall) -> Self {
            ThemelioBridgeTestCalls::VerifyTx(var)
        }
    }
    impl ::std::convert::From<VerifyTxTestHelperCall> for ThemelioBridgeTestCalls {
        fn from(var: VerifyTxTestHelperCall) -> Self {
            ThemelioBridgeTestCalls::VerifyTxTestHelper(var)
        }
    }
}
