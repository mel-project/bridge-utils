pub use ed_25519::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod ed_25519 {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "Ed25519 was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    # [rustfmt :: skip] const __ABI : & str = "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"k\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"m\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]}]" ;
    #[doc = r" The parsed JSON-ABI of the contract."]
    pub static ED25519_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static ED25519_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x6080806040523461001a576132a19081610020823930815050f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c632bf6eda81461002857600080fd5b608036600319011261008c576064356001600160401b039182821161008c573660238301121561008c57816004013592831161008c57366024848401011161008c5760206100828460248501604435602435600435610175565b6040519015158152f35b80fd5b61010081019081106001600160401b038211176100ab57604052565b634e487b7160e01b600052604160045260246000fd5b61020081019081106001600160401b038211176100ab57604052565b6001600160401b0381116100ab57601f01601f191660200190565b90610102826100dd565b60405190601f1990601f01811682016001600160401b038111838210176100ab5760405283825261013382946100dd565b0190602036910137565b90815181101561014e570160200190565b634e487b7160e01b600052603260045260246000fd5b90600881101561014e5760051b0190565b919094610184856040016100f8565b9560005b60208110612569575060005b6020808210156101b857906001916101b187831a9183018b61013d565b5301610194565b505091959490929360005b828110612541575050506101006040516101dc8161008f565b369037604051936101ec8561008f565b676a09e667f3bcc908855267bb67ae8584caa73b6020860152673c6ef372fe94f82b604086015267a54ff53a5f1d36f1606086015267510e527fade682d16080860152679b05688c2b3e6c1f60a0860152671f83d9abfb41bd6b60c0860152675be0cd19137e217960e086015260405180610a008101106001600160401b03610a00830111176100ab57610a008101604052610a00368237604051916102918361008f565b6000835260006020840152600060408401526000606084015260006080840152600060a0840152600060c0840152600060e08401526040519283610a008101106001600160401b03610a00860111176100ab57610a00840160405267428a2f98d728ae228452677137449123ef65cd602085015267b5c0fbcfec4d3b2f604085015267e9b5dba58189dbbc6060850152673956c25bf348b53860808501526759f111f1b605d01960a085015267923f82a4af194f9b60c085015267ab1c5ed5da6d811860e085015267d807aa98a30302426101008501526712835b0145706fbe61012085015267243185be4ee4b28c61014085015267550c7dc3d5ffb4e26101608501526772be5d74f27b896f6101808501526780deb1fe3b1696b16101a0850152679bdc06a725c712356101c085015267c19bf174cf6926946101e085015267e49b69c19ef14ad261020085015267efbe4786384f25e3610220850152670fc19dc68b8cd5b561024085015267240ca1cc77ac9c65610260850152672de92c6f592b0275610280850152674a7484aa6ea6e4836102a0850152675cb0a9dcbd41fbd46102c08501526776f988da831153b56102e085015267983e5152ee66dfab61030085015267a831c66d2db4321061032085015267b00327c898fb213f61034085015267bf597fc7beef0ee461036085015267c6e00bf33da88fc261038085015267d5a79147930aa7256103a08501526706ca6351e003826f6103c085015267142929670a0e6e706103e08501526727b70a8546d22ffc610400850152672e1b21385c26c926610420850152674d2c6dfc5ac42aed6104408501526753380d139d95b3df61046085015267650a73548baf63de61048085015267766a0abb3c77b2a86104a08501526781c2c92e47edaee66104c08501526792722c851482353b6104e085015267a2bfe8a14cf1036461050085015267a81a664bbc42300161052085015267c24b8b70d0f8979161054085015267c76c51a30654be3061056085015267d192e819d6ef521861058085015267d69906245565a9106105a085015267f40e35855771202a6105c085015267106aa07032bbd1b86105e08501526719a4c116b8d2d0c8610600850152671e376c085141ab53610620850152672748774cdf8eeb996106408501526734b0bcb5e19b48a861066085015267391c0cb3c5c95a63610680850152674ed8aa4ae3418acb6106a0850152675b9cca4f7763e3736106c085015267682e6ff3d6b2b8a36106e085015267748f82ee5defb2fc6107008501526778a5636f43172f606107208501526784c87814a1f0ab72610740850152678cc702081a6439ec6107608501526790befffa23631e2861078085015267a4506cebde82bde96107a085015267bef9a3f7b2c679156107c085015267c67178f2e372532b6107e085015267ca273eceea26619c61080085015267d186b8c721c0c20761082085015267eada7dd6cde0eb1e61084085015267f57d4f7fee6ed1786108608501526706f067aa72176fba610880850152670a637dc5a2c898a66108a085015267113f9804bef90dae6108c0850152671b710b35131c471b6108e08501526728db77f523047d846109008501526732caab7b40c72493610920850152673c9ebe0a15c9bebc61094085015267431d67c49c100d4c610960850152674cc5d4becb3e42b661098085015267597f299cfc657e2a6109a0850152675fcb6fab3ad6faec6109c0850152676c44198c4a4758176109e08501528151607f81168060800360808111611eb95790607081101561252a575b506107bc6107c19183613179565b6100f8565b9260005b8281106124ff5750508060806107de6107e4938661013d565b53613195565b6040805160809290921b6001600160801b03191660208301526010825281016001600160401b038111828210176100ab5760405280518351939493600019808201918211939083019083821160005b8581106124a857505050505050508251916000925b8060071c8410611e0a575050505050506001600160401b03845116936001600160401b0360401b9485602083015160401b161760e06001600160401b0360801b9182604085015160801b1617916001600160401b0360c01b9283606086015160c01b1617976001600160401b036080860151169060a086015160401b16179060c085015160801b161792015160c01b16179267ffffffffffffffff67ffffffffffffffff60801b0160008051602061324c8339815191526000805160206131ac83398151915260008051602061320c8339815191528460081c1660008051602061322c8339815191528560081b161760101c166000805160206131ec83398151915260008051602061320c8339815191528560081c1660008051602061322c8339815191528660081b161760101b161760201c1660008051602061324c833981519152196000805160206131ac83398151915260008051602061320c8339815191528560081c1660008051602061322c8339815191528660081b161760101c166000805160206131ec83398151915260008051602061320c8339815191528660081c1660008051602061322c8339815191528760081b161760101b161760201b161760401c169067ffffffffffffffff67ffffffffffffffff60801b01199060008051602061324c8339815191526000805160206131ac83398151915260008051602061320c8339815191528360081c1660008051602061322c8339815191528460081b161760101c166000805160206131ec83398151915260008051602061320c8339815191528460081c1660008051602061322c8339815191528560081b161760101b161760201c169060008051602061324c83398151915219906000805160206131ec8339815191526000805160206131ac83398151915260008051602061320c8339815191528360081c1660008051602061322c8339815191528460081b161760101c169160008051602061322c83398151915260008051602061320c8339815191528260081c169160081b161760101b161760201b161760401b16176000906013600160ff1b03600160138160ff1b036000805160206131cc83398151915260138360ff1b03838060ff1b038660801c8760801b1716848060ff1b038760801c8860801b17160909016013600160ff1b036014600160ff1b0381608086811b9087901c176001600160ff1b031680090809610bc781612580565b506013600160ff1b039080096013600160ff1b0391829182908009096013600160ff1b036014600160ff1b0381608086811b9087901c176001600160ff1b03168009080991966013600160ff1b036014600160ff1b0381608085811b9086901c176001600160ff1b03168009086013600160ff1b036001816000805160206131cc83398151915281608088811b9089901c176001600160ff1b0316800909016013600160ff1b038680090903611d58575b8160801c8260801b1760ff1c6001841603611d46575b600881811b60008051602061322c8339815191521691901c60008051602061320c8339815191521617601081811b6000805160206131ec8339815191521691901c6000805160206131ac8339815191521617602081811b7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff191691901c60008051602061324c8339815191521617604081811b77ffffffffffffffff0000000000000000ffffffffffffffff191691901c67ffffffffffffffff67ffffffffffffffff60801b011617966f14def9dea2f79cd65812631a5cf5d3ed600160fc1b01608089811b908a901c171015611d3957604051908160408101106001600160401b036040840111176100ab576040820160405260005b60408110611ce0575061196c5794939291906013600160ff1b036013600160ff1b018180600186096013600160ff1b0360018709096013600160ff1b03806001608087811b9088901c176001600160ff1b0316096013600160ff1b036001608088811b9089901c176001600160ff1b03160909036025190301600208936013600160ff1b03806001608085811b9086901c176001600160ff1b0316096013600160ff1b0360018609096013600160ff1b03908690800109976013600160ff1b038080600187096013600160ff1b0360018809096013600160ff1b03806001608088811b9089901c176001600160ff1b0316096013600160ff1b036001608089811b908a901c176001600160ff1b0316090903016013600160ff1b038181806001608089811b908a901c176001600160ff1b0316096013600160ff1b03600160808a811b908b901c176001600160ff1b031609096013600160ff1b038060018a096013600160ff1b0360018b09090109966013600160ff1b039109986013600160ff1b03818009906013600160ff1b03888009976013600160ff1b039109996013600160ff1b039080096013600160ff1b038289038181019392849291602519036013600160ff1b0101908001089b6013600160ff1b03908d90800109986013600160ff1b03920109996013600160ff1b039109906013600160ff1b038a88098001966013600160ff1b03908009996013600160ff1b039080096013600160ff1b038b82038181019c9092019a6000949092919080096013600160ff1b0391602519036013600160ff1b01019080010898600194845b61196c578c9b8b6013600160ff1b03818f0980019d6013600160ff1b03828e096013600160ff1b038285090161103189602089015151610164565b526013600160ff1b039182908e09906013600160ff1b03908409030161105e876020808801510151610164565b526013600160ff1b037f2406d9dc56dffce7198e80f2eef3d13000e0149a8283b156ebd69b9426b2f15981838e090961109f87604060208801510151610164565b528c6110ad87865151610164565b52866110be87602087510151610164565b526000966013600160ff1b03908e90099a600787146111dc57898e9f8e9f999a829d9e9f819d600160ff1b6013900392600160ff1b60019003908060801c9060801b17160190600160ff1b601390039086096013600160ff1b0384880901099f6013600160ff1b039260808e811b908f901c176001600160ff1b031603830191839182908609906013600160ff1b03908709030109916013600160ff1b0391828060808e811b908f901c176001600160ff1b03168f097f2406d9dc56dffce7198e80f2eef3d13000e0149a8283b156ebd69b9426b2f1599009916013600160ff1b039109096013600160ff1b03828f03810198919291839008989e989d01976013600160ff1b03918203900894600101949a95999897969b9c610ff6565b50509796509793995097509850506111f49150612580565b9561196c576013600160ff1b039080096013600160ff1b03908009600095906013600160ff1b039081818009906013600160ff1b03908009096013600160ff1b0391908290800909956007965b61125088602088510151610164565b519661196c576013600160ff1b03808883096112718a60208a015151610164565b510961128289602089015151610164565b526013600160ff1b03808883096112a08a6020808b01510151610164565b51096112b3896020808a01510151610164565b526112c688604060208901510151610164565b516000976013600160ff1b0391908290840990096112ec89604060208a01510151610164565b528715611315576112ff88875151610164565b516013600160ff1b039109966000190196611241565b5091949296909395506040518060608101106001600160401b036060830111176100ab576060819795970160405261134f6060820161008f565b7f43e7ce9d19ea5d329385a44c321ea16167c996e37dc6070c97de49e37ac61db9606082019081527f40cff34425d8ec30a3bb74ba58cd5854fa1e38186ad0d31ebc8ae251ceb2c97e60808301527f459bd27046e8dd45aea7008db87a5a8f7906779253d64523589518599fdfbf4b60a08301527f69fdd1e28c23cc3894d0c8ff90e76f6d5b6e4c2e620136d04dd83c4a51581ab960c08301527f54dceb3413ce5cfa11196dfc960b6edaf4b380c6d4d2378419cc0279ba49c5f360e08301527f4e24184dd71a3d77eef3729f7f8cf7c17224cf40aa7b9548b9942f3c5084ceed6101008301527f5a0e5aab20262674ae1175761cbf5e889b52a55fd7ac5027c228cebdc8d2360a6101208301527f26239334073e9b38c62859556d451c3dcc8d30e84b361174f488eadde2cf17d961014083015281526040516114928161008f565b7f227e97c94c7c0933d2e0c21a3447c504fe9ccf82e8a05f59ce881c82eba0489f81527f226a3e0ecc4afec6fd0d288413014a9dbddecf06c1a2f0bb702ba77c613d820960208201527f34d7efc851d45c5e71efeb0f235b794691de6228877569b3a8d52bf058b8a4a060408201527f3c1f5fb3ca7166fce1471c9b752b6d28c56301ad7b65e8451b2c8c5526726e1260608201527f6102416cf02f02ff5be75275f55f28db89b2a9d2456b860ce22fc0e5031f7cc560808201527f40adf677f1bfdae057f0fd179c12617918ddaa2891a6530fb1a4294fa866549060a08201527f61936f3c415609046187b8baa978cbc9b47893363ae5a3cc7d909f3635ae7f4860c08201527f562a9662b6ec47f9e979d473c02b51e4423368238c58ddb52f0e5c6a180e641060e082015260208201526040516115d08161008f565b7f3788bdb44f8632d42d0dbee5eea1acc6136cf411e655624f55e48902c3bd553481527f6190cf2c2a7b5ad769d594a82844f23b4167fa7c8ac30e51aa6cfbebdcd4b94560208201527f65f7787096be9204123a71f3ac88a87be1513217737d6a1e2f3a13a43d7e3a9a60408201527f023af32dbfa67975536479a7a7ce74a02142147fac0480187f1f13349cda1f2d60608201527f64fc44b7fc6841bddb0ced8b8b0fe6759137ef87ee96651215fc1dbcd25c64dc60808201527f1434aa3748b701d5b69df3d7d340c1fe3f6b9c1efc617484caadb47e382f447560a08201527f457a6da8c962ef35f2b217423e5844e9d23534527e8ea4290d24e3ddf21720c660c08201527f63b9540ceb60ccb51e4d989d956e053cf2511837efb79089d2ff40284202c53d60e0820152604082015284528060801c9060801b1760031b956000805160206131ec8339815191526000805160206131ac83398151915260008051602061320c8339815191528360081c1660008051602061322c8339815191528460081b161760101c169160008051602061322c83398151915260008051602061320c8339815191528260081c169160081b161760101b16179060008051602061322c83398151915260008051602061320c8339815191528260081c169160081b16176000805160206131ec8339815191526000805160206131ac8339815191528260101c169160101b1617906fa6f7cef517bce6b2c09318d2e7ae9f60600160ff1b01916f14def9dea2f79cd65812631a5cf5d3ed600160fc1b01916f14def9dea2f79cd65812631a5cf5d3ed600160fc1b019070013910a40b8c82308f2913ce8b72676ae3600160fc1b039060008051602061324c8339815191528160201c169060008051602061324c833981519152199060201b16170990602081811b7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff191691901c60008051602061324c8339815191521617080192600090600195600194600160fc955b6008871b8b16611c2a575b6008871b8916611b6f575b86156119825761196c576013600160ff1b03808287096013600160ff1b0383880909966013600160ff1b03908a90096013600160ff1b03818009996013600160ff1b03908390096013600160ff1b03908009956013600160ff1b03928391090988870198908001976013600160ff1b0397909103878101976000969091602519036013600160ff1b0101908001089560001901959097949896986118b7565b634e487b7160e01b600052601260045260246000fd5b9196929893995096945061196c57611a0c6013600160ff1b03878509926013600160ff1b03818409976013600160ff1b03910996604060208860078b9916936013600160ff1b036119d7868585015151610164565b518983036013600160ff1b030109976119fe8685806013600160ff1b039601510151610164565b519101099801510151610164565b516000936013600160ff1b0392839109096013600160ff1b03828603810196829003019490910192019061196c57611a4d6013600160ff1b03828509612580565b906013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b0391908290800909936013600160ff1b039182908609900960ff1b926013600160ff1b039283910990091760008051602061322c83398151915260008051602061320c8339815191528260081c169160081b16176000805160206131ec8339815191526000805160206131ac8339815191528260101c169160101b161760008051602061324c8339815191528160201c169060008051602061324c833981519152199060201b161767ffffffffffffffff67ffffffffffffffff60801b018160401c169067ffffffffffffffff67ffffffffffffffff60801b01199060401b16178060801c9060801b171490565b989490979861196c576013600160ff1b0388860996611bfb60078b891c16809b60078a1b19169a611ba582602088015151610164565b51906013600160ff1b03908609986013600160ff1b03908509906013600160ff1b03908a830382010998611be86013600160ff1b03936020808a01510151610164565b519101099a604060208601510151610164565b516000926013600160ff1b0392839109096013600160ff1b0381890381019a87810199979003019501906118cd565b999894909961196c576013600160ff1b038a860996611cae60078b891c16809b60078a1b19169c611c6082602088510151610164565b51906013600160ff1b03908609986013600160ff1b03908509906013600160ff1b03908a830382010998611c9e6013600160ff1b0393885151610164565b519101099a604085510151610164565b516000926013600160ff1b03928391090980880199868101986013600160ff1b039790910387019691900301906118c2565b6040518060608101106001600160401b036060830111176100ab576060810160405260005b60608110611d1a575083820152602001610da1565b602090604051611d298161008f565b6101003682378184015201611d05565b5050505092505050600090565b6013600160ff1b039290920391610c8e565b9196506013600160ff1b036014600160ff1b0381608084811b9085901c176001600160ff1b03168009086013600160ff1b03908103906001816000805160206131cc83398151915281608087811b9088901c176001600160ff1b0316800909016013600160ff1b038a80090903611dfe576000966013600160ff1b03907f2b8324804fc1df0b2b4d00993dfbd7a72f431806ad2fe478c4ee1b274a0ea0b0900991610c78565b50505092505050600090565b929661020060409b93979a969b9992959951611e25816100c1565b36903760405199611e358b6100c1565b610200368c3760005b601060ff82161015611f1d5789600019046080118a151516611eb957600860ff8281168015159104821116611eb9578b611e8160f88460031b168d60071b613179565b9160009283925b828410611ecf575050505060c01c611ea48d60ff84169061315b565b5260ff809116908114611eb957600101611e3e565b634e487b7160e01b600052601160045260246000fd5b929391929091611f15916001600160c01b0319906001600160f81b031990611f0190611efb8988613179565b9061013d565b5116611f0c87613195565b1c161793613186565b91908e611e88565b5096919893929a95999790976001600160401b038b511683526001600160401b0360208c01511660208401526001600160401b0360408c01511660408401526001600160401b0360608c01511660608401526001600160401b0360808c01511660808401526001600160401b0360a08c01511660a08401526001600160401b0360c08c01511660c08401526001600160401b0360e08c01511660e084015260005b605081106120b45750506001906001600160401b03808c51168185511601168b526001600160401b038060208d01511681602086015116011660208c01526001600160401b038060408d01511681604086015116011660408c01526001600160401b038060608d01511681606086015116011660608c01526001600160401b038060808d01511681608086015116011660808c01526001600160401b038060a08d0151168160a086015116011660a08c01526001600160401b038060c08d0151168160c086015116011660c08c01526001600160401b038060e08d0151168160e086015116011660e08c01520192939091610848565b601081101561237a576001600160401b036120cf828461315b565b51166120db828961314a565b525b6001600160401b0360e08501511660808501516001600160401b036603ffffffffffff82600e1c16613fff60321b8360321b160111611eb9576001600160401b03653fffffffffff8260121c166203ffff602e1b83602e1b160111611eb957627fffff8160291c1667ffffffffff8000008260171b1601906001600160401b038211611eb9578392839260808901518d8d60a08c01519160c08d0151986121839161314a565b516001600160401b0316966121979161314a565b516001600160401b0316966001600160401b0383166001600160401b0318166001600160401b031691166001600160401b031618928060121c653fffffffffff1681602e1b6203ffff602e1b16019080600e1c6603ffffffffffff169060321b613fff60321b16011818016001600160401b0316016001600160401b0316016001600160401b0316016001600160401b031690845180601c1c640fffffffff168160241b67fffffff00000000016016001600160401b0310611eb9576001600160401b03633fffffff8260221c1667ffffffffc000000083601e1b160111611eb9576001600160401b036301ffffff8260271c1667fffffffffe0000008360191b160111611eb9576001926001600160401b038092885160208a0151908360408c0151928c60e08360c0830151169101528c60c08360a0830151169101528c60a0836080830151169101528c608083898160608501511601169101528c60608386169101528c60408383169101528c6020838516910152818085831616948416169216161818906301ffffff8160271c1667fffffffffe0000008260191b160190633fffffff8160221c1667ffffffffc000000082601e1b16019067fffffff000000000640fffffffff82601c1c169160241b1601181801160116855201611fbe565b61238860011982018861314a565b51651fffffffffff8160131c1667ffffe0000000000082602d1b1601906001600160401b038211611eb957600781603d1c1667fffffffffffffff88260031b1601916001600160401b038311611eb9576001600160401b036123ee60061986018c61314a565b5116916123ff600e1986018c61314a565b5192677fffffffffffffff8460011c166001603f1b85603f1b1601906001600160401b038211611eb95766ffffffffffffff8560081c1660ff60381b8660381b1601936001600160401b038511611eb9576001600160401b03966703ffffffffffffff8f9489976701ffffffffffffff8961248081998f600f19019061314a565b51169a60071c169118189560061c169118180116011601166124a2828961314a565b526120dd565b81999899611eb95786906001600160f81b03196124ce6124c8838861316c565b8661013d565b511691611eb9576124f7916124f16124e6838961316c565b9160001a918c61013d565b53613186565b989798610833565b612525906001600160f81b0319612516828561013d565b511660001a6124f1828861013d565b6107c5565b9050610100036101008111611eb9576107bc6107ae565b600190828101356001600160f81b03191660001a612562604083018a61013d565b53016101c3565b80826001921a612579828b61013d565b5301610188565b6013600160ff1b03818009906013600160ff1b03828009916013600160ff1b03908183818680090909916013600160ff1b0391829182908009096013600160ff1b03838009096013600160ff1b038180096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b03808083800984096013600160ff1b03808480098509096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b0380808380096013600160ff1b03808680098709096013600160ff1b03808480096013600160ff1b0380878009880909096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b03919082908009906013600160ff1b0390819080096013600160ff1b0380868009870909096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b0380808380096013600160ff1b03808680098709096013600160ff1b03808480096013600160ff1b0380878009880909096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b0380808380096013600160ff1b03808680096013600160ff1b03808980098a0909096013600160ff1b03808480096013600160ff1b03808780096013600160ff1b03808a80098b090909096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b03919082908009906013600160ff1b0390819080096013600160ff1b03808680096013600160ff1b03808980098a090909096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b039080096013600160ff1b03939084908009926013600160ff1b039283908009916013600160ff1b0391829080099009090991565b90605081101561014e5760051b0190565b90601081101561014e5760051b0190565b91908203918211611eb957565b91908201809211611eb957565b6000198114611eb95760010190565b806000190460081181151516611eb95760031b9056fe0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000000ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ffff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0000000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffffa2646970667358221220a78b2624425a3603625706bfb057ebadc6e4613f54497ec26a2c95c8a34c2aef64736f6c63430008100033" . parse () . expect ("invalid bytecode")
        });
    pub struct Ed25519<M>(ethers::contract::Contract<M>);
    impl<M> Clone for Ed25519<M> {
        fn clone(&self) -> Self {
            Ed25519(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for Ed25519<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for Ed25519<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(Ed25519))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> Ed25519<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), ED25519_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                ED25519_ABI.clone(),
                ED25519_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `verify` (0x2bf6eda8) function"]
        pub fn verify(
            &self,
            k: [u8; 32],
            r: [u8; 32],
            s: [u8; 32],
            m: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([43, 246, 237, 168], (k, r, s, m))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for Ed25519<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `verify` function with signature `verify(bytes32,bytes32,bytes32,bytes)` and selector `[43, 246, 237, 168]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "verify", abi = "verify(bytes32,bytes32,bytes32,bytes)")]
    pub struct VerifyCall {
        pub k: [u8; 32],
        pub r: [u8; 32],
        pub s: [u8; 32],
        pub m: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all return fields from the `verify` function with signature `verify(bytes32,bytes32,bytes32,bytes)` and selector `[43, 246, 237, 168]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct VerifyReturn(pub bool);
}
